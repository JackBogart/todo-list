{"version":3,"file":"main.92abb0efb4434ec77963.js","mappings":"mBAgCO,SAASA,EAAOC,GACrB,MAAMC,EAASC,OAAOC,UAAUC,SAASC,KAAKL,GAG9C,OACEA,aAAoBM,MACC,iBAAbN,GAAoC,kBAAXC,EAG1B,IAAID,EAASO,aAAaP,GAEb,iBAAbA,GACI,oBAAXC,GACoB,iBAAbD,GACI,oBAAXC,EAGO,IAAIK,KAAKN,GAGT,IAAIM,KAAKE,IAEpB,CCtDO,SAASC,EAAgBC,EAAQC,GAGtC,OAFaD,EAAS,EAAI,IAAM,IACjBE,KAAKC,IAAIH,GAAQN,WAAWU,SAASH,EAAc,IAEpE,CCwCO,SAASI,EAAUC,EAAMC,GAC9B,MAAMC,EAAQnB,EAAOiB,GAErB,GAAIG,MAAMD,EAAME,WACd,MAAM,IAAIC,WAAW,sBAGvB,MAAMC,EAASL,GAASK,QAAU,WAC5BC,EAAiBN,GAASM,gBAAkB,WAElD,IAAIC,EAAS,GACTC,EAAW,GAEf,MAAMC,EAA2B,aAAXJ,EAAwB,IAAM,GAC9CK,EAA2B,aAAXL,EAAwB,IAAM,GAGpD,GAAuB,SAAnBC,EAA2B,CAC7B,MAAMK,EAAMnB,EAAgBS,EAAMW,UAAW,GACvCC,EAAQrB,EAAgBS,EAAMa,WAAa,EAAG,GAIpDP,EAAS,GAHIf,EAAgBS,EAAMc,cAAe,KAG/BN,IAAgBI,IAAQJ,IAAgBE,GAC7D,CAGA,GAAuB,SAAnBL,EAA2B,CAE7B,MAAMU,EAASf,EAAMgB,oBAErB,GAAe,IAAXD,EAAc,CAChB,MAAME,EAAiBvB,KAAKC,IAAIoB,GAMhCR,EAAW,GAFEQ,EAAS,EAAI,IAAM,MAHbxB,EAAgBG,KAAKwB,MAAMD,EAAiB,IAAK,MAC/C1B,EAAgB0B,EAAiB,GAAI,IAK5D,MACEV,EAAW,IAcbD,EAAS,GAAGA,IANiB,KAAXA,EAAgB,GAAK,MAG1B,CARAf,EAAgBS,EAAMmB,WAAY,GAChC5B,EAAgBS,EAAMoB,aAAc,GACpC7B,EAAgBS,EAAMqB,aAAc,IAMfC,KAAKb,KAGDF,GAC1C,CAEA,OAAOD,CACT,CAGA,MCzGMiB,EAAuB,CAC3BC,iBAAkB,CAChBC,IAAK,qBACLC,MAAO,+BAGTC,SAAU,CACRF,IAAK,WACLC,MAAO,qBAGTE,YAAa,gBAEbC,iBAAkB,CAChBJ,IAAK,qBACLC,MAAO,+BAGTI,SAAU,CACRL,IAAK,WACLC,MAAO,qBAGTK,YAAa,CACXN,IAAK,eACLC,MAAO,yBAGTM,OAAQ,CACNP,IAAK,SACLC,MAAO,mBAGTO,MAAO,CACLR,IAAK,QACLC,MAAO,kBAGTQ,YAAa,CACXT,IAAK,eACLC,MAAO,yBAGTS,OAAQ,CACNV,IAAK,SACLC,MAAO,mBAGTU,aAAc,CACZX,IAAK,gBACLC,MAAO,0BAGTW,QAAS,CACPZ,IAAK,UACLC,MAAO,oBAGTY,YAAa,CACXb,IAAK,eACLC,MAAO,yBAGTa,OAAQ,CACNd,IAAK,SACLC,MAAO,mBAGTc,WAAY,CACVf,IAAK,cACLC,MAAO,wBAGTe,aAAc,CACZhB,IAAK,gBACLC,MAAO,2BC3EJ,SAASgB,EAAkBC,GAChC,MAAO,CAAC5C,EAAU,CAAC,KAEjB,MAAM6C,EAAQ7C,EAAQ6C,MAAQC,OAAO9C,EAAQ6C,OAASD,EAAKG,aAE3D,OADeH,EAAKI,QAAQH,IAAUD,EAAKI,QAAQJ,EAAKG,aAC3C,CAEjB,CCLA,MAqBaE,EAAa,CACxBlD,KAAM4C,EAAkB,CACtBK,QAvBgB,CAClBE,KAAM,mBACNC,KAAM,aACNC,OAAQ,WACRC,MAAO,cAoBLN,aAAc,SAGhBO,KAAMX,EAAkB,CACtBK,QArBgB,CAClBE,KAAM,iBACNC,KAAM,cACNC,OAAQ,YACRC,MAAO,UAkBLN,aAAc,SAGhBQ,SAAUZ,EAAkB,CAC1BK,QAnBoB,CACtBE,KAAM,yBACNC,KAAM,yBACNC,OAAQ,qBACRC,MAAO,sBAgBLN,aAAc,UCpCZS,EAAuB,CAC3BC,SAAU,qBACVC,UAAW,mBACXC,MAAO,eACPC,SAAU,kBACVC,SAAU,cACVlC,MAAO,KCmCF,SAASmC,EAAgBlB,GAC9B,MAAO,CAACmB,EAAO/D,KAGb,IAAIgE,EACJ,GAAgB,gBAHAhE,GAASiE,QAAUnB,OAAO9C,EAAQiE,SAAW,eAG7BrB,EAAKsB,iBAAkB,CACrD,MAAMnB,EAAeH,EAAKuB,wBAA0BvB,EAAKG,aACnDF,EAAQ7C,GAAS6C,MAAQC,OAAO9C,EAAQ6C,OAASE,EAEvDiB,EACEpB,EAAKsB,iBAAiBrB,IAAUD,EAAKsB,iBAAiBnB,EAC1D,KAAO,CACL,MAAMA,EAAeH,EAAKG,aACpBF,EAAQ7C,GAAS6C,MAAQC,OAAO9C,EAAQ6C,OAASD,EAAKG,aAE5DiB,EAAcpB,EAAKwB,OAAOvB,IAAUD,EAAKwB,OAAOrB,EAClD,CAIA,OAAOiB,EAHOpB,EAAKyB,iBAAmBzB,EAAKyB,iBAAiBN,GAASA,EAG5C,CAE7B,CC/DO,SAASO,EAAa1B,GAC3B,MAAO,CAAC2B,EAAQvE,EAAU,CAAC,KACzB,MAAM6C,EAAQ7C,EAAQ6C,MAEhB2B,EACH3B,GAASD,EAAK6B,cAAc5B,IAC7BD,EAAK6B,cAAc7B,EAAK8B,mBACpBC,EAAcJ,EAAOK,MAAMJ,GAEjC,IAAKG,EACH,OAAO,KAET,MAAME,EAAgBF,EAAY,GAE5BG,EACHjC,GAASD,EAAKkC,cAAcjC,IAC7BD,EAAKkC,cAAclC,EAAKmC,mBAEpBC,EAAMC,MAAMC,QAAQJ,GA+B9B,SAAmBK,EAAOC,GACxB,IAAK,IAAIJ,EAAM,EAAGA,EAAMG,EAAME,OAAQL,IACpC,GAAcG,EAAMH,GAhC8BM,KAAKT,GAiCrD,OAAOG,CAIb,CArCQO,CAAUT,GAkBlB,SAAiBU,EAAQJ,GACvB,IAAK,MAAMJ,KAAOQ,EAChB,GACEvG,OAAOC,UAAUuG,eAAerG,KAAKoG,EAAQR,IACnCQ,EAAOR,GApB6BM,KAAKT,GAsBnD,OAAOG,CAIb,CA1BQU,CAAQZ,GAEZ,IAAIf,EAUJ,OARAA,EAAQnB,EAAK+C,cAAgB/C,EAAK+C,cAAcX,GAAOA,EACvDjB,EAAQ/D,EAAQ2F,cAEZ3F,EAAQ2F,cAAc5B,GACtBA,EAIG,CAAEA,QAAO6B,KAFHrB,EAAOsB,MAAMhB,EAAcQ,QAElB,CAE1B,CCnCO,IAA6BzC,ECc7B,MAAMkD,EAAO,CAClBC,KAAM,QACNC,eP+D4B,CAACC,EAAOC,EAAOlG,KAC3C,IAAIO,EAEJ,MAAM4F,EAAa3E,EAAqByE,GASxC,OAPE1F,EADwB,iBAAf4F,EACAA,EACU,IAAVD,EACAC,EAAWzE,IAEXyE,EAAWxE,MAAMyE,QAAQ,YAAaF,EAAM/G,YAGnDa,GAASqG,UACPrG,EAAQsG,YAActG,EAAQsG,WAAa,EACtC,MAAQ/F,EAERA,EAAS,OAIbA,CAAM,EOlFb0C,WAAYA,EACZsD,eJT4B,CAACN,EAAOhG,EAAOuG,EAAWC,IACtDjD,EAAqByC,GISrBS,SCyIsB,CACtBC,cAzBoB,CAACC,EAAaH,KAClC,MAAMhH,EAASoH,OAAOD,GAShBE,EAASrH,EAAS,IACxB,GAAIqH,EAAS,IAAMA,EAAS,GAC1B,OAAQA,EAAS,IACf,KAAK,EACH,OAAOrH,EAAS,KAClB,KAAK,EACH,OAAOA,EAAS,KAClB,KAAK,EACH,OAAOA,EAAS,KAGtB,OAAOA,EAAS,IAAI,EAMpBsH,IAAKjD,EAAgB,CACnBM,OA9Jc,CAChB4C,OAAQ,CAAC,IAAK,KACdC,YAAa,CAAC,KAAM,MACpBC,KAAM,CAAC,gBAAiB,gBA4JtBnE,aAAc,SAGhBoE,QAASrD,EAAgB,CACvBM,OA7JkB,CACpB4C,OAAQ,CAAC,IAAK,IAAK,IAAK,KACxBC,YAAa,CAAC,KAAM,KAAM,KAAM,MAChCC,KAAM,CAAC,cAAe,cAAe,cAAe,gBA2JlDnE,aAAc,OACdsB,iBAAmB8C,GAAYA,EAAU,IAG3CtG,MAAOiD,EAAgB,CACrBM,OAzJgB,CAClB4C,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChEC,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGFC,KAAM,CACJ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aA6HAnE,aAAc,SAGhBpC,IAAKmD,EAAgB,CACnBM,OA7Hc,CAChB4C,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvC3D,MAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5C4D,YAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACxDC,KAAM,CACJ,SACA,SACA,UACA,YACA,WACA,SACA,aAmHAnE,aAAc,SAGhBqE,UAAWtD,EAAgB,CACzBM,OAnHoB,CACtB4C,OAAQ,CACNK,GAAI,IACJC,GAAI,IACJC,SAAU,KACVC,KAAM,IACNC,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,MAAO,SAETX,YAAa,CACXI,GAAI,KACJC,GAAI,KACJC,SAAU,WACVC,KAAM,OACNC,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,MAAO,SAETV,KAAM,CACJG,GAAI,OACJC,GAAI,OACJC,SAAU,WACVC,KAAM,OACNC,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,MAAO,UAuFP7E,aAAc,OACdmB,iBApF8B,CAChC8C,OAAQ,CACNK,GAAI,IACJC,GAAI,IACJC,SAAU,KACVC,KAAM,IACNC,QAAS,iBACTC,UAAW,mBACXC,QAAS,iBACTC,MAAO,YAETX,YAAa,CACXI,GAAI,KACJC,GAAI,KACJC,SAAU,WACVC,KAAM,OACNC,QAAS,iBACTC,UAAW,mBACXC,QAAS,iBACTC,MAAO,YAETV,KAAM,CACJG,GAAI,OACJC,GAAI,OACJC,SAAU,WACVC,KAAM,OACNC,QAAS,iBACTC,UAAW,mBACXC,QAAS,iBACTC,MAAO,aAwDPzD,uBAAwB,UDpK1BS,MEqEmB,CACnB+B,eH1FkC/D,EG0FC,CACjC4B,aAxF8B,wBAyF9BqD,aAxF8B,OAyF9BlC,cAAgB5B,GAAU+D,SAAS/D,EAAO,KH5FrC,CAACQ,EAAQvE,EAAU,CAAC,KACzB,MAAM2E,EAAcJ,EAAOK,MAAMhC,EAAK4B,cACtC,IAAKG,EAAa,OAAO,KACzB,MAAME,EAAgBF,EAAY,GAE5BoD,EAAcxD,EAAOK,MAAMhC,EAAKiF,cACtC,IAAKE,EAAa,OAAO,KACzB,IAAIhE,EAAQnB,EAAK+C,cACb/C,EAAK+C,cAAcoC,EAAY,IAC/BA,EAAY,GAOhB,OAJAhE,EAAQ/D,EAAQ2F,cAAgB3F,EAAQ2F,cAAc5B,GAASA,EAIxD,CAAEA,QAAO6B,KAFHrB,EAAOsB,MAAMhB,EAAcQ,QAElB,GG+ExB0B,IAAKzC,EAAa,CAChBG,cA3FqB,CACvBuC,OAAQ,UACRC,YAAa,6DACbC,KAAM,8DAyFJxC,kBAAmB,OACnBI,cAxFqB,CACvBkD,IAAK,CAAC,MAAO,YAwFXjD,kBAAmB,QAGrBoC,QAAS7C,EAAa,CACpBG,cAzFyB,CAC3BuC,OAAQ,WACRC,YAAa,YACbC,KAAM,kCAuFJxC,kBAAmB,OACnBI,cAtFyB,CAC3BkD,IAAK,CAAC,KAAM,KAAM,KAAM,OAsFtBjD,kBAAmB,MACnBY,cAAgBsC,GAAUA,EAAQ,IAGpCpH,MAAOyD,EAAa,CAClBG,cAxFuB,CACzBuC,OAAQ,eACRC,YAAa,sDACbC,KAAM,6FAsFJxC,kBAAmB,OACnBI,cArFuB,CACzBkC,OAAQ,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGFgB,IAAK,CACH,OACA,MACA,QACA,OACA,QACA,QACA,QACA,OACA,MACA,MACA,MACA,QA0DAjD,kBAAmB,QAGrBpE,IAAK2D,EAAa,CAChBG,cA1DqB,CACvBuC,OAAQ,YACR3D,MAAO,2BACP4D,YAAa,kCACbC,KAAM,gEAuDJxC,kBAAmB,OACnBI,cAtDqB,CACvBkC,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnDgB,IAAK,CAAC,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,SAqDjDjD,kBAAmB,QAGrBqC,UAAW9C,EAAa,CACtBG,cAtD2B,CAC7BuC,OAAQ,6DACRgB,IAAK,kFAqDHtD,kBAAmB,MACnBI,cApD2B,CAC7BkD,IAAK,CACHX,GAAI,MACJC,GAAI,MACJC,SAAU,OACVC,KAAM,OACNC,QAAS,WACTC,UAAW,aACXC,QAAS,WACTC,MAAO,WA4CP7C,kBAAmB,SF5GrB/E,QAAS,CACPkI,aAAc,EACdC,sBAAuB,IGvB3B,IAAIC,EAAiB,CAAC,EAEf,SAASC,IACd,OAAOD,CACT,CCiDuBzI,KAAK2I,IAAI,GAAI,GA/B7B,MAsDMC,EAAqB,OAOrBC,EAAoB,MC7D1B,SAASC,EAAW1I,GACzB,MAAME,EAAQnB,EAAOiB,GAErB,OADAE,EAAMyI,SAAS,EAAG,EAAG,EAAG,GACjBzI,CACT,CCbO,SAAS0I,EAAgC5I,GAC9C,MAAME,EAAQnB,EAAOiB,GACf6I,EAAU,IAAIvJ,KAClBA,KAAKwJ,IACH5I,EAAMc,cACNd,EAAMa,WACNb,EAAMW,UACNX,EAAMmB,WACNnB,EAAMoB,aACNpB,EAAMqB,aACNrB,EAAM6I,oBAIV,OADAF,EAAQG,eAAe9I,EAAMc,gBACrBhB,GAAQ6I,CAClB,CCEO,SAASI,EAAcjJ,EAAMgE,GAClC,OAAIhE,aAAgBV,KACX,IAAIU,EAAKT,YAAYyE,GAErB,IAAI1E,KAAK0E,EAEpB,CCbO,SAASkF,EAAalJ,GAC3B,MAAME,EAAQnB,EAAOiB,GAGrB,OCSK,SAAkCmJ,EAAUC,GACjD,MAAMC,EAAiBX,EAAWS,GAC5BG,EAAkBZ,EAAWU,GAE7BG,GACHF,EAAiBT,EAAgCS,GAC9CG,GACHF,EAAkBV,EAAgCU,GAKrD,OAAO1J,KAAK6J,OAAOF,EAAgBC,GAAkBf,EACvD,CDxBeiB,CAAyBxJ,EEFjC,SAAqBF,GAC1B,MAAM2J,EAAY5K,EAAOiB,GACnBE,EAAQ+I,EAAcjJ,EAAM,GAGlC,OAFAE,EAAM0J,YAAYD,EAAU3I,cAAe,EAAG,GAC9Cd,EAAMyI,SAAS,EAAG,EAAG,EAAG,GACjBzI,CACT,CFJ+C2J,CAAY3J,IAChC,CAE3B,CGKO,SAAS4J,EAAY9J,EAAMC,GAChC,MAAMoI,EAAiBC,IACjBH,EACJlI,GAASkI,cACTlI,GAAS8J,QAAQ9J,SAASkI,cAC1BE,EAAeF,cACfE,EAAe0B,QAAQ9J,SAASkI,cAChC,EAEIjI,EAAQnB,EAAOiB,GACfY,EAAMV,EAAM8J,SACZC,GAAQrJ,EAAMuH,EAAe,EAAI,GAAKvH,EAAMuH,EAIlD,OAFAjI,EAAMgK,QAAQhK,EAAMW,UAAYoJ,GAChC/J,EAAMyI,SAAS,EAAG,EAAG,EAAG,GACjBzI,CACT,CCzBO,SAASiK,EAAenK,GAC7B,OAAO8J,EAAY9J,EAAM,CAAEmI,aAAc,GAC3C,CCAO,SAASiC,EAAepK,GAC7B,MAAME,EAAQnB,EAAOiB,GACfqK,EAAOnK,EAAMc,cAEbsJ,EAA4BrB,EAAcjJ,EAAM,GACtDsK,EAA0BV,YAAYS,EAAO,EAAG,EAAG,GACnDC,EAA0B3B,SAAS,EAAG,EAAG,EAAG,GAC5C,MAAM4B,EAAkBJ,EAAeG,GAEjCE,EAA4BvB,EAAcjJ,EAAM,GACtDwK,EAA0BZ,YAAYS,EAAM,EAAG,GAC/CG,EAA0B7B,SAAS,EAAG,EAAG,EAAG,GAC5C,MAAM8B,EAAkBN,EAAeK,GAEvC,OAAItK,EAAME,WAAamK,EAAgBnK,UAC9BiK,EAAO,EACLnK,EAAME,WAAaqK,EAAgBrK,UACrCiK,EAEAA,EAAO,CAElB,CCrBO,SAASK,EAAW1K,GACzB,MAAME,EAAQnB,EAAOiB,GACfiK,GAAQE,EAAejK,ICDxB,SAA4BF,GACjC,MAAMqK,EAAOD,EAAepK,GACtB2K,EAAkB1B,EAAcjJ,EAAM,GAG5C,OAFA2K,EAAgBf,YAAYS,EAAM,EAAG,GACrCM,EAAgBhC,SAAS,EAAG,EAAG,EAAG,GAC3BwB,EAAeQ,EACxB,CDLyCC,CAAmB1K,GAK1D,OAAON,KAAK6J,MAAMQ,EAAOzB,GAAsB,CACjD,CEWO,SAASqC,EAAY7K,EAAMC,GAChC,MAAMC,EAAQnB,EAAOiB,GACfqK,EAAOnK,EAAMc,cAEbqH,EAAiBC,IACjBF,EACJnI,GAASmI,uBACTnI,GAAS8J,QAAQ9J,SAASmI,uBAC1BC,EAAeD,uBACfC,EAAe0B,QAAQ9J,SAASmI,uBAChC,EAEI0C,EAAsB7B,EAAcjJ,EAAM,GAChD8K,EAAoBlB,YAAYS,EAAO,EAAG,EAAGjC,GAC7C0C,EAAoBnC,SAAS,EAAG,EAAG,EAAG,GACtC,MAAM4B,EAAkBT,EAAYgB,EAAqB7K,GAEnD8K,EAAsB9B,EAAcjJ,EAAM,GAChD+K,EAAoBnB,YAAYS,EAAM,EAAGjC,GACzC2C,EAAoBpC,SAAS,EAAG,EAAG,EAAG,GACtC,MAAM8B,EAAkBX,EAAYiB,EAAqB9K,GAEzD,OAAIC,EAAME,WAAamK,EAAgBnK,UAC9BiK,EAAO,EACLnK,EAAME,WAAaqK,EAAgBrK,UACrCiK,EAEAA,EAAO,CAElB,CC5BO,SAASW,EAAQhL,EAAMC,GAC5B,MAAMC,EAAQnB,EAAOiB,GACfiK,GAAQH,EAAY5J,EAAOD,ICH5B,SAAyBD,EAAMC,GACpC,MAAMoI,EAAiBC,IACjBF,EACJnI,GAASmI,uBACTnI,GAAS8J,QAAQ9J,SAASmI,uBAC1BC,EAAeD,uBACfC,EAAe0B,QAAQ9J,SAASmI,uBAChC,EAEIiC,EAAOQ,EAAY7K,EAAMC,GACzBgL,EAAYhC,EAAcjJ,EAAM,GAItC,OAHAiL,EAAUrB,YAAYS,EAAM,EAAGjC,GAC/B6C,EAAUtC,SAAS,EAAG,EAAG,EAAG,GACdmB,EAAYmB,EAAWhL,EAEvC,CDZ+CiL,CAAgBhL,EAAOD,GAKpE,OAAOL,KAAK6J,MAAMQ,EAAOzB,GAAsB,CACjD,CAGA,ME1Ca2C,EAAkB,CAE7B,CAAAC,CAAEpL,EAAMkG,GAUN,MAAMmF,EAAarL,EAAKgB,cAElBqJ,EAAOgB,EAAa,EAAIA,EAAa,EAAIA,EAC/C,OAAO5L,EAA0B,OAAVyG,EAAiBmE,EAAO,IAAMA,EAAMnE,EAAMZ,OACnE,EAGA,CAAAgG,CAAEtL,EAAMkG,GACN,MAAMpF,EAAQd,EAAKe,WACnB,MAAiB,MAAVmF,EAAgBnD,OAAOjC,EAAQ,GAAKrB,EAAgBqB,EAAQ,EAAG,EACxE,EAGAyK,EAAC,CAACvL,EAAMkG,IACCzG,EAAgBO,EAAKa,UAAWqF,EAAMZ,QAI/C,CAAAkG,CAAExL,EAAMkG,GACN,MAAMuF,EAAqBzL,EAAKqB,WAAa,IAAM,EAAI,KAAO,KAE9D,OAAQ6E,GACN,IAAK,IACL,IAAK,KACH,OAAOuF,EAAmBC,cAC5B,IAAK,MACH,OAAOD,EACT,IAAK,QACH,OAAOA,EAAmB,GAE5B,QACE,MAA8B,OAAvBA,EAA8B,OAAS,OAEpD,EAGAE,EAAC,CAAC3L,EAAMkG,IACCzG,EAAgBO,EAAKqB,WAAa,IAAM,GAAI6E,EAAMZ,QAI3DsG,EAAC,CAAC5L,EAAMkG,IACCzG,EAAgBO,EAAKqB,WAAY6E,EAAMZ,QAIhDuG,EAAC,CAAC7L,EAAMkG,IACCzG,EAAgBO,EAAKsB,aAAc4E,EAAMZ,QAIlDwG,EAAC,CAAC9L,EAAMkG,IACCzG,EAAgBO,EAAKuB,aAAc2E,EAAMZ,QAIlD,CAAAyG,CAAE/L,EAAMkG,GACN,MAAM8F,EAAiB9F,EAAMZ,OACvB2G,EAAejM,EAAK+I,kBAI1B,OAAOtJ,EAHmBG,KAAKwB,MAC7B6K,EAAerM,KAAK2I,IAAI,GAAIyD,EAAiB,IAEL9F,EAAMZ,OAClD,GCzBW4G,EAAa,CAExBC,EAAG,SAAUnM,EAAMkG,EAAOS,GACxB,MAAMK,EAAMhH,EAAKgB,cAAgB,EAAI,EAAI,EACzC,OAAQkF,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOS,EAASK,IAAIA,EAAK,CAAElE,MAAO,gBAEpC,IAAK,QACH,OAAO6D,EAASK,IAAIA,EAAK,CAAElE,MAAO,WAGpC,QACE,OAAO6D,EAASK,IAAIA,EAAK,CAAElE,MAAO,SAExC,EAGAsI,EAAG,SAAUpL,EAAMkG,EAAOS,GAExB,GAAc,OAAVT,EAAgB,CAClB,MAAMmF,EAAarL,EAAKgB,cAElBqJ,EAAOgB,EAAa,EAAIA,EAAa,EAAIA,EAC/C,OAAO1E,EAASC,cAAcyD,EAAM,CAAE+B,KAAM,QAC9C,CAEA,OAAOjB,EAAgBC,EAAEpL,EAAMkG,EACjC,EAGAmG,EAAG,SAAUrM,EAAMkG,EAAOS,EAAU1G,GAClC,MAAMqM,EAAiBzB,EAAY7K,EAAMC,GAEnCsM,EAAWD,EAAiB,EAAIA,EAAiB,EAAIA,EAG3D,MAAc,OAAVpG,EAEKzG,EADc8M,EAAW,IACK,GAIzB,OAAVrG,EACKS,EAASC,cAAc2F,EAAU,CAAEH,KAAM,SAI3C3M,EAAgB8M,EAAUrG,EAAMZ,OACzC,EAGAkH,EAAG,SAAUxM,EAAMkG,GAIjB,OAAOzG,EAHa2K,EAAepK,GAGCkG,EAAMZ,OAC5C,EAWAmH,EAAG,SAAUzM,EAAMkG,GAEjB,OAAOzG,EADMO,EAAKgB,cACWkF,EAAMZ,OACrC,EAGAoH,EAAG,SAAU1M,EAAMkG,EAAOS,GACxB,MAAMS,EAAUxH,KAAK+M,MAAM3M,EAAKe,WAAa,GAAK,GAClD,OAAQmF,GAEN,IAAK,IACH,OAAOnD,OAAOqE,GAEhB,IAAK,KACH,OAAO3H,EAAgB2H,EAAS,GAElC,IAAK,KACH,OAAOT,EAASC,cAAcQ,EAAS,CAAEgF,KAAM,YAEjD,IAAK,MACH,OAAOzF,EAASS,QAAQA,EAAS,CAC/BtE,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAASS,QAAQA,EAAS,CAC/BtE,MAAO,SACPoB,QAAS,eAIb,QACE,OAAOyC,EAASS,QAAQA,EAAS,CAC/BtE,MAAO,OACPoB,QAAS,eAGjB,EAGA0I,EAAG,SAAU5M,EAAMkG,EAAOS,GACxB,MAAMS,EAAUxH,KAAK+M,MAAM3M,EAAKe,WAAa,GAAK,GAClD,OAAQmF,GAEN,IAAK,IACH,OAAOnD,OAAOqE,GAEhB,IAAK,KACH,OAAO3H,EAAgB2H,EAAS,GAElC,IAAK,KACH,OAAOT,EAASC,cAAcQ,EAAS,CAAEgF,KAAM,YAEjD,IAAK,MACH,OAAOzF,EAASS,QAAQA,EAAS,CAC/BtE,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAASS,QAAQA,EAAS,CAC/BtE,MAAO,SACPoB,QAAS,eAIb,QACE,OAAOyC,EAASS,QAAQA,EAAS,CAC/BtE,MAAO,OACPoB,QAAS,eAGjB,EAGAoH,EAAG,SAAUtL,EAAMkG,EAAOS,GACxB,MAAM7F,EAAQd,EAAKe,WACnB,OAAQmF,GACN,IAAK,IACL,IAAK,KACH,OAAOiF,EAAgBG,EAAEtL,EAAMkG,GAEjC,IAAK,KACH,OAAOS,EAASC,cAAc9F,EAAQ,EAAG,CAAEsL,KAAM,UAEnD,IAAK,MACH,OAAOzF,EAAS7F,MAAMA,EAAO,CAC3BgC,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAAS7F,MAAMA,EAAO,CAC3BgC,MAAO,SACPoB,QAAS,eAIb,QACE,OAAOyC,EAAS7F,MAAMA,EAAO,CAAEgC,MAAO,OAAQoB,QAAS,eAE7D,EAGA2I,EAAG,SAAU7M,EAAMkG,EAAOS,GACxB,MAAM7F,EAAQd,EAAKe,WACnB,OAAQmF,GAEN,IAAK,IACH,OAAOnD,OAAOjC,EAAQ,GAExB,IAAK,KACH,OAAOrB,EAAgBqB,EAAQ,EAAG,GAEpC,IAAK,KACH,OAAO6F,EAASC,cAAc9F,EAAQ,EAAG,CAAEsL,KAAM,UAEnD,IAAK,MACH,OAAOzF,EAAS7F,MAAMA,EAAO,CAC3BgC,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAAS7F,MAAMA,EAAO,CAC3BgC,MAAO,SACPoB,QAAS,eAIb,QACE,OAAOyC,EAAS7F,MAAMA,EAAO,CAAEgC,MAAO,OAAQoB,QAAS,eAE7D,EAGA4I,EAAG,SAAU9M,EAAMkG,EAAOS,EAAU1G,GAClC,MAAM8M,EAAO/B,EAAQhL,EAAMC,GAE3B,MAAc,OAAViG,EACKS,EAASC,cAAcmG,EAAM,CAAEX,KAAM,SAGvC3M,EAAgBsN,EAAM7G,EAAMZ,OACrC,EAGA0H,EAAG,SAAUhN,EAAMkG,EAAOS,GACxB,MAAMsG,EAAUvC,EAAW1K,GAE3B,MAAc,OAAVkG,EACKS,EAASC,cAAcqG,EAAS,CAAEb,KAAM,SAG1C3M,EAAgBwN,EAAS/G,EAAMZ,OACxC,EAGAiG,EAAG,SAAUvL,EAAMkG,EAAOS,GACxB,MAAc,OAAVT,EACKS,EAASC,cAAc5G,EAAKa,UAAW,CAAEuL,KAAM,SAGjDjB,EAAgBI,EAAEvL,EAAMkG,EACjC,EAGAgH,EAAG,SAAUlN,EAAMkG,EAAOS,GACxB,MAAMwG,EAAYjE,EAAalJ,GAE/B,MAAc,OAAVkG,EACKS,EAASC,cAAcuG,EAAW,CAAEf,KAAM,cAG5C3M,EAAgB0N,EAAWjH,EAAMZ,OAC1C,EAGA8H,EAAG,SAAUpN,EAAMkG,EAAOS,GACxB,MAAM0G,EAAYrN,EAAKgK,SACvB,OAAQ9D,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOS,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,QACPoB,QAAS,eAIb,QACE,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,OACPoB,QAAS,eAGjB,EAGAoJ,EAAG,SAAUtN,EAAMkG,EAAOS,EAAU1G,GAClC,MAAMoN,EAAYrN,EAAKgK,SACjBuD,GAAkBF,EAAYpN,EAAQkI,aAAe,GAAK,GAAK,EACrE,OAAQjC,GAEN,IAAK,IACH,OAAOnD,OAAOwK,GAEhB,IAAK,KACH,OAAO9N,EAAgB8N,EAAgB,GAEzC,IAAK,KACH,OAAO5G,EAASC,cAAc2G,EAAgB,CAAEnB,KAAM,QACxD,IAAK,MACH,OAAOzF,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,QACPoB,QAAS,eAIb,QACE,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,OACPoB,QAAS,eAGjB,EAGAsJ,EAAG,SAAUxN,EAAMkG,EAAOS,EAAU1G,GAClC,MAAMoN,EAAYrN,EAAKgK,SACjBuD,GAAkBF,EAAYpN,EAAQkI,aAAe,GAAK,GAAK,EACrE,OAAQjC,GAEN,IAAK,IACH,OAAOnD,OAAOwK,GAEhB,IAAK,KACH,OAAO9N,EAAgB8N,EAAgBrH,EAAMZ,QAE/C,IAAK,KACH,OAAOqB,EAASC,cAAc2G,EAAgB,CAAEnB,KAAM,QACxD,IAAK,MACH,OAAOzF,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,QACPoB,QAAS,eAIb,QACE,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,OACPoB,QAAS,eAGjB,EAGAuJ,EAAG,SAAUzN,EAAMkG,EAAOS,GACxB,MAAM0G,EAAYrN,EAAKgK,SACjB0D,EAA6B,IAAdL,EAAkB,EAAIA,EAC3C,OAAQnH,GAEN,IAAK,IACH,OAAOnD,OAAO2K,GAEhB,IAAK,KACH,OAAOjO,EAAgBiO,EAAcxH,EAAMZ,QAE7C,IAAK,KACH,OAAOqB,EAASC,cAAc8G,EAAc,CAAEtB,KAAM,QAEtD,IAAK,MACH,OAAOzF,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,QACPoB,QAAS,eAIb,QACE,OAAOyC,EAAS/F,IAAIyM,EAAW,CAC7BvK,MAAO,OACPoB,QAAS,eAGjB,EAGAsH,EAAG,SAAUxL,EAAMkG,EAAOS,GACxB,MACM8E,EADQzL,EAAKqB,WACgB,IAAM,EAAI,KAAO,KAEpD,OAAQ6E,GACN,IAAK,IACL,IAAK,KACH,OAAOS,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,cACPoB,QAAS,eAEb,IAAK,MACH,OAAOyC,EACJU,UAAUoE,EAAoB,CAC7B3I,MAAO,cACPoB,QAAS,eAEVyJ,cACL,IAAK,QACH,OAAOhH,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,SACPoB,QAAS,eAGb,QACE,OAAOyC,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,OACPoB,QAAS,eAGjB,EAGA0J,EAAG,SAAU5N,EAAMkG,EAAOS,GACxB,MAAMkH,EAAQ7N,EAAKqB,WACnB,IAAIoK,EASJ,OAPEA,EADY,KAAVoC,EAjfA,OAmfiB,IAAVA,EApfH,WAufeA,EAAQ,IAAM,EAAI,KAAO,KAGxC3H,GACN,IAAK,IACL,IAAK,KACH,OAAOS,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,cACPoB,QAAS,eAEb,IAAK,MACH,OAAOyC,EACJU,UAAUoE,EAAoB,CAC7B3I,MAAO,cACPoB,QAAS,eAEVyJ,cACL,IAAK,QACH,OAAOhH,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,SACPoB,QAAS,eAGb,QACE,OAAOyC,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,OACPoB,QAAS,eAGjB,EAGA4J,EAAG,SAAU9N,EAAMkG,EAAOS,GACxB,MAAMkH,EAAQ7N,EAAKqB,WACnB,IAAIoK,EAWJ,OATEA,EADEoC,GAAS,GAthBN,UAwhBIA,GAAS,GAzhBX,YA2hBEA,GAAS,EA5hBb,UAGF,QA+hBG3H,GACN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOS,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,cACPoB,QAAS,eAEb,IAAK,QACH,OAAOyC,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,SACPoB,QAAS,eAGb,QACE,OAAOyC,EAASU,UAAUoE,EAAoB,CAC5C3I,MAAO,OACPoB,QAAS,eAGjB,EAGAyH,EAAG,SAAU3L,EAAMkG,EAAOS,GACxB,GAAc,OAAVT,EAAgB,CAClB,IAAI2H,EAAQ7N,EAAKqB,WAAa,GAE9B,OADc,IAAVwM,IAAaA,EAAQ,IAClBlH,EAASC,cAAciH,EAAO,CAAEzB,KAAM,QAC/C,CAEA,OAAOjB,EAAgBQ,EAAE3L,EAAMkG,EACjC,EAGA0F,EAAG,SAAU5L,EAAMkG,EAAOS,GACxB,MAAc,OAAVT,EACKS,EAASC,cAAc5G,EAAKqB,WAAY,CAAE+K,KAAM,SAGlDjB,EAAgBS,EAAE5L,EAAMkG,EACjC,EAGA6H,EAAG,SAAU/N,EAAMkG,EAAOS,GACxB,MAAMkH,EAAQ7N,EAAKqB,WAAa,GAEhC,MAAc,OAAV6E,EACKS,EAASC,cAAciH,EAAO,CAAEzB,KAAM,SAGxC3M,EAAgBoO,EAAO3H,EAAMZ,OACtC,EAGA0I,EAAG,SAAUhO,EAAMkG,EAAOS,GACxB,IAAIkH,EAAQ7N,EAAKqB,WAGjB,OAFc,IAAVwM,IAAaA,EAAQ,IAEX,OAAV3H,EACKS,EAASC,cAAciH,EAAO,CAAEzB,KAAM,SAGxC3M,EAAgBoO,EAAO3H,EAAMZ,OACtC,EAGAuG,EAAG,SAAU7L,EAAMkG,EAAOS,GACxB,MAAc,OAAVT,EACKS,EAASC,cAAc5G,EAAKsB,aAAc,CAAE8K,KAAM,WAGpDjB,EAAgBU,EAAE7L,EAAMkG,EACjC,EAGA4F,EAAG,SAAU9L,EAAMkG,EAAOS,GACxB,MAAc,OAAVT,EACKS,EAASC,cAAc5G,EAAKuB,aAAc,CAAE6K,KAAM,WAGpDjB,EAAgBW,EAAE9L,EAAMkG,EACjC,EAGA6F,EAAG,SAAU/L,EAAMkG,GACjB,OAAOiF,EAAgBY,EAAE/L,EAAMkG,EACjC,EAGA+H,EAAG,SAAUjO,EAAMkG,EAAOgI,GACxB,MAAMC,EAAiBnO,EAAKkB,oBAE5B,GAAuB,IAAnBiN,EACF,MAAO,IAGT,OAAQjI,GAEN,IAAK,IACH,OAAOkI,EAAkCD,GAK3C,IAAK,OACL,IAAK,KACH,OAAOE,EAAeF,GAOxB,QACE,OAAOE,EAAeF,EAAgB,KAE5C,EAGAG,EAAG,SAAUtO,EAAMkG,EAAOgI,GACxB,MAAMC,EAAiBnO,EAAKkB,oBAE5B,OAAQgF,GAEN,IAAK,IACH,OAAOkI,EAAkCD,GAK3C,IAAK,OACL,IAAK,KACH,OAAOE,EAAeF,GAOxB,QACE,OAAOE,EAAeF,EAAgB,KAE5C,EAGAI,EAAG,SAAUvO,EAAMkG,EAAOgI,GACxB,MAAMC,EAAiBnO,EAAKkB,oBAE5B,OAAQgF,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,MAAO,MAAQsI,EAAoBL,EAAgB,KAGrD,QACE,MAAO,MAAQE,EAAeF,EAAgB,KAEpD,EAGAM,EAAG,SAAUzO,EAAMkG,EAAOgI,GACxB,MAAMC,EAAiBnO,EAAKkB,oBAE5B,OAAQgF,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,MAAO,MAAQsI,EAAoBL,EAAgB,KAGrD,QACE,MAAO,MAAQE,EAAeF,EAAgB,KAEpD,EAGAO,EAAG,SAAU1O,EAAMkG,EAAOgI,GAExB,OAAOzO,EADWG,KAAKwB,MAAMpB,EAAKI,UAAY,KACZ8F,EAAMZ,OAC1C,EAGAqJ,EAAG,SAAU3O,EAAMkG,EAAOgI,GAExB,OAAOzO,EADWO,EAAKI,UACW8F,EAAMZ,OAC1C,GAGF,SAASkJ,EAAoBvN,EAAQ2N,EAAY,IAC/C,MAAMC,EAAO5N,EAAS,EAAI,IAAM,IAC1B6N,EAAYlP,KAAKC,IAAIoB,GACrB4M,EAAQjO,KAAKwB,MAAM0N,EAAY,IAC/BC,EAAUD,EAAY,GAC5B,OAAgB,IAAZC,EACKF,EAAO9L,OAAO8K,GAEhBgB,EAAO9L,OAAO8K,GAASe,EAAYnP,EAAgBsP,EAAS,EACrE,CAEA,SAASX,EAAkCnN,EAAQ2N,GACjD,OAAI3N,EAAS,IAAO,GACLA,EAAS,EAAI,IAAM,KAClBxB,EAAgBG,KAAKC,IAAIoB,GAAU,GAAI,GAEhDoN,EAAepN,EAAQ2N,EAChC,CAEA,SAASP,EAAepN,EAAQ2N,EAAY,IAC1C,MAAMC,EAAO5N,EAAS,EAAI,IAAM,IAC1B6N,EAAYlP,KAAKC,IAAIoB,GAG3B,OAAO4N,EAFOpP,EAAgBG,KAAKwB,MAAM0N,EAAY,IAAK,GAEpCF,EADNnP,EAAgBqP,EAAY,GAAI,EAElD,CCvwBA,MAAME,EAAoB,CAACC,EAAS/L,KAClC,OAAQ+L,GACN,IAAK,IACH,OAAO/L,EAAWlD,KAAK,CAAE8C,MAAO,UAClC,IAAK,KACH,OAAOI,EAAWlD,KAAK,CAAE8C,MAAO,WAClC,IAAK,MACH,OAAOI,EAAWlD,KAAK,CAAE8C,MAAO,SAElC,QACE,OAAOI,EAAWlD,KAAK,CAAE8C,MAAO,SACpC,EAGIoM,EAAoB,CAACD,EAAS/L,KAClC,OAAQ+L,GACN,IAAK,IACH,OAAO/L,EAAWK,KAAK,CAAET,MAAO,UAClC,IAAK,KACH,OAAOI,EAAWK,KAAK,CAAET,MAAO,WAClC,IAAK,MACH,OAAOI,EAAWK,KAAK,CAAET,MAAO,SAElC,QACE,OAAOI,EAAWK,KAAK,CAAET,MAAO,SACpC,EAmCWqM,EAAiB,CAC5BC,EAAGF,EACHG,EAlC4B,CAACJ,EAAS/L,KACtC,MAAM0B,EAAcqK,EAAQpK,MAAM,cAAgB,GAC5CyK,EAAc1K,EAAY,GAC1B2K,EAAc3K,EAAY,GAEhC,IAAK2K,EACH,OAAOP,EAAkBC,EAAS/L,GAGpC,IAAIsM,EAEJ,OAAQF,GACN,IAAK,IACHE,EAAiBtM,EAAWM,SAAS,CAAEV,MAAO,UAC9C,MACF,IAAK,KACH0M,EAAiBtM,EAAWM,SAAS,CAAEV,MAAO,WAC9C,MACF,IAAK,MACH0M,EAAiBtM,EAAWM,SAAS,CAAEV,MAAO,SAC9C,MAEF,QACE0M,EAAiBtM,EAAWM,SAAS,CAAEV,MAAO,SAIlD,OAAO0M,EACJnJ,QAAQ,WAAY2I,EAAkBM,EAAapM,IACnDmD,QAAQ,WAAY6I,EAAkBK,EAAarM,GAAY,GCzD9DuM,EAAmB,OACnBC,EAAkB,OAElBC,EAAc,CAAC,IAAK,KAAM,KAAM,QCiC/B,SAASC,EAAQ5P,GACtB,KCLqBgE,EDKThE,ECHVgE,aAAiB1E,MACC,iBAAV0E,GACoC,kBAA1C9E,OAAOC,UAAUC,SAASC,KAAK2E,IDCE,iBAAThE,GAC1B,OAAO,ECNJ,IAAgBgE,EDQrB,MAAM9D,EAAQnB,EAAOiB,GACrB,OAAQG,MAAM2G,OAAO5G,GACvB,CAGA,MElBM2P,EACJ,wDAIIC,EAA6B,oCAE7BC,EAAsB,eACtBC,EAAoB,MACpBC,EAAgC,WAoYtC,SAASC,EAAmBC,GAC1B,MAAMC,EAAUD,EAAMtL,MAAMkL,GAE5B,OAAKK,EAIEA,EAAQ,GAAG/J,QAAQ2J,EAAmB,KAHpCG,CAIX,CC3aO,SAASE,EAAmB/K,EAAQtF,EAAMC,GAC7C,MAAMqQ,EAmBV,SAAgBhL,EAAQiL,EAAUxG,GAC9B,OAAO,IAAIyG,KAAKC,eAAe1G,EAAS,CAACA,EAAO/D,KAAM,cAAW0K,EAAW,CACxEH,SAAUA,EACVI,aAAcrL,GAEtB,CAxBgBsL,CAAOtL,EAAQrF,EAAQsQ,SAAUtQ,EAAQ8J,QACrD,MAAO,kBAAmBuG,EAE9B,SAAuBA,EAAKtQ,GACxB,MAAM6Q,EAAYP,EAAIQ,cAAc9Q,GACpC,IAAK,IAAIyN,EAAIoD,EAAUvL,OAAS,EAAGmI,GAAK,IAAKA,EACzC,GAA0B,iBAAtBoD,EAAUpD,GAAGsD,KACb,OAAOF,EAAUpD,GAAGzJ,KAIhC,CAVoCgN,CAAcV,EAAKtQ,GAWvD,SAAuBsQ,EAAKtQ,GACxB,MAAM6Q,EAAYP,EAAIhQ,OAAON,GAAMqG,QAAQ,UAAW,IAChD4K,EAAc,aAAaC,KAAKL,GACtC,OAAOI,EAAcA,EAAY,GAAGE,OAAO,GAAK,EACpD,CAf+DC,CAAcd,EAAKtQ,EAClF,CCAA,MAAMqR,EAAY,CACdhH,KAAM,EACNvJ,MAAO,EACPF,IAAK,EACL0Q,KAAM,EACNC,OAAQ,EACRC,OAAQ,GAuCNC,EAAW,CAAC,EC9CX,SAASC,EAAWC,EAAU7Q,EAAOF,EAAK0Q,EAAMC,EAAQC,EAAQI,GACnE,MAAM/I,EAAU,IAAIvJ,KAAK,GAGzB,OAFAuJ,EAAQG,eAAe2I,EAAU7Q,EAAOF,GACxCiI,EAAQgJ,YAAYP,EAAMC,EAAQC,EAAQI,GACnC/I,CACX,CCVA,MAAMiJ,EAAuB,KACvBC,EAAyB,IACzBC,EAAW,CACbC,SAAU,aACVC,UAAW,QACXC,WAAY,gBACZC,aAAc,4BAGX,SAAS,EAAgBC,EAAgBrS,EAAMsS,GAElD,IAAKD,EACD,OAAO,EAGX,IAIIxE,EACA1M,EALA+E,EAAQ8L,EAASE,UAAUhB,KAAKmB,GACpC,GAAInM,EACA,OAAO,EAMX,GADAA,EAAQ8L,EAASG,WAAWjB,KAAKmB,GAC7BnM,EAEA,OADA2H,EAAQ9F,SAAS7B,EAAM,GAAI,IACtBqM,EAAiB1E,IAGbA,EAAQiE,EAFNtS,IAMf,GADA0G,EAAQ8L,EAASI,aAAalB,KAAKmB,GAC/BnM,EAAO,CACP2H,EAAQ9F,SAAS7B,EAAM,GAAI,IAC3B,MAAM6I,EAAUhH,SAAS7B,EAAM,GAAI,IACnC,OAAKqM,EAAiB1E,EAAOkB,IAG7B5N,EAAiBvB,KAAKC,IAAIgO,GAASiE,EAAuB/C,EAAUgD,EAChD,MAAb7L,EAAM,IAAc/E,EAAiBA,GAHjC3B,GAIf,CAEA,GA6CJ,SAAmCgT,GAC/B,GAAIC,EAAuBD,GACvB,OAAO,EACX,IAGI,OAFA,IAAIhC,KAAKC,oBAAeC,EAAW,CAAEH,SAAUiC,IAC/CC,EAAuBD,IAAkB,GAClC,CACX,CACA,MAAOE,GACH,OAAO,CACX,CACJ,CAxDQC,CAA0BN,GAAiB,CAC3CrS,EAAO,IAAIV,KAAKU,GAAQV,KAAKsT,OAC7B,MAAM/J,EAAUyJ,EAAYtS,EAOpC,SAAmBA,GACf,OAAO0R,EAAW1R,EAAKgB,cAAehB,EAAKe,WAAYf,EAAKa,UAAWb,EAAKqB,WAAYrB,EAAKsB,aAActB,EAAKuB,aAAcvB,EAAK+I,kBACvI,CAT2C8J,CAAU7S,GACvCiB,EAAS6R,EAAWjK,EAASwJ,GAC7BU,EAAcT,EAAYrR,EAiBxC,SAAmBjB,EAAMiB,EAAQoR,GAG7B,IAAIW,EAFYhT,EAAKI,UAEIa,EAEzB,MAAMgS,EAAKH,EAAW,IAAIxT,KAAK0T,GAAWX,GAE1C,GAAIpR,IAAWgS,EACX,OAAOhS,EAGX+R,GAAYC,EAAKhS,EAEjB,MAAMiS,EAAKJ,EAAW,IAAIxT,KAAK0T,GAAWX,GAC1C,OAAIY,IAAOC,EACAD,EAGJrT,KAAKuT,IAAIF,EAAIC,EACxB,CApCiDE,CAAUpT,EAAMiB,EAAQoR,GACjE,OAAQU,CACZ,CACA,OAAOvT,GACX,CAIA,SAASsT,EAAW9S,EAAMqS,GACtB,MAAMgB,EFrDH,SAAwBrT,EAAMuQ,GACjC,MAAMD,EAiDV,SAA2BC,GACvB,IAAKkB,EAASlB,GAAW,CAErB,MAAM+C,EAAoB,IAAI9C,KAAKC,eAAe,QAAS,CACvD8C,UAAW,MACXhD,SAAU,mBACVlG,KAAM,UACNvJ,MAAO,UACPF,IAAK,UACL0Q,KAAM,UACNC,OAAQ,UACRC,OAAQ,YACTlR,OAAO,IAAIhB,KAAK,6BACbkU,EAA2C,yBAAtBF,GACD,mCAAtBA,EACJ7B,EAASlB,GAAYiD,EACf,IAAIhD,KAAKC,eAAe,QAAS,CAC/B8C,UAAW,MACXhD,SAAUA,EACVlG,KAAM,UACNvJ,MAAO,UACPF,IAAK,UACL0Q,KAAM,UACNC,OAAQ,UACRC,OAAQ,YAEV,IAAIhB,KAAKC,eAAe,QAAS,CAC/BgD,QAAQ,EACRlD,SAAUA,EACVlG,KAAM,UACNvJ,MAAO,UACPF,IAAK,UACL0Q,KAAM,UACNC,OAAQ,UACRC,OAAQ,WAEpB,CACA,OAAOC,EAASlB,EACpB,CAvFgBmD,CAAkBnD,GAC9B,MAAO,kBAAmBD,EAU9B,SAAqBA,EAAKtQ,GACtB,IACI,MAAM6Q,EAAYP,EAAIQ,cAAc9Q,GAC9B2T,EAAS,GACf,IAAK,IAAIlG,EAAI,EAAGA,EAAIoD,EAAUvL,OAAQmI,IAAK,CACvC,MAAMmG,EAAMvC,EAAUR,EAAUpD,GAAGsD,WACvBL,IAARkD,IACAD,EAAOC,GAAO7L,SAAS8I,EAAUpD,GAAGzJ,MAAO,IAEnD,CACA,OAAO2P,CACX,CACA,MAAOjB,GACH,GAAIA,aAAiBrS,WACjB,MAAO,CAACb,KAEZ,MAAMkT,CACV,CACJ,CA5BoCmB,CAAYvD,EAAKtQ,GA6BrD,SAAqBsQ,EAAKtQ,GACtB,MAAM6Q,EAAYP,EAAIhQ,OAAON,GAEvB8T,EAAS,0CAA0C5C,KAAKL,GAG9D,MAAO,CACH9I,SAAS+L,EAAO,GAAI,IACpB/L,SAAS+L,EAAO,GAAI,IACpB/L,SAAS+L,EAAO,GAAI,IACpB/L,SAAS+L,EAAO,GAAI,IACpB/L,SAAS+L,EAAO,GAAI,IACpB/L,SAAS+L,EAAO,GAAI,IAE5B,CA3C6DC,CAAYzD,EAAKtQ,EAC9E,CEkDmBgU,CAAehU,EAAMqS,GAE9B4B,EAAQvC,EAAW2B,EAAO,GAAIA,EAAO,GAAK,EAAGA,EAAO,GAAIA,EAAO,GAAK,GAAIA,EAAO,GAAIA,EAAO,GAAI,GAAGjT,UACvG,IAAI8T,EAAOlU,EAAKI,UAChB,MAAM+T,EAAOD,EAAO,IAEpB,OADAA,GAAQC,GAAQ,EAAIA,EAAO,IAAOA,EAC3BF,EAAQC,CACnB,CAqBA,SAAS3B,EAAiB1E,EAAOkB,GAC7B,OAAQ,IAAMlB,GAASA,GAAS,KAAkB,MAAXkB,GAAoB,GAAKA,GAAWA,GAAW,GAC1F,CACA,MAAM0D,EAAyB,CAAC,ECrFnB,GAAa,CAEtBxE,EAAG,SAAUjO,EAAMkG,EAAOjG,GACtB,MAAMkO,EAAiBiG,GAAkBnU,EAAQsQ,SAAUvQ,GAC3D,GAAuB,IAAnBmO,EACA,MAAO,IAEX,OAAQjI,GAEJ,IAAK,IACD,OAAO,GAAkCiI,GAI7C,IAAK,OACL,IAAK,KACD,OAAO,GAAeA,GAM1B,QACI,OAAO,GAAeA,EAAgB,KAElD,EAEAG,EAAG,SAAUtO,EAAMkG,EAAOjG,GACtB,MAAMkO,EAAiBiG,GAAkBnU,EAAQsQ,SAAUvQ,GAC3D,OAAQkG,GAEJ,IAAK,IACD,OAAO,GAAkCiI,GAI7C,IAAK,OACL,IAAK,KACD,OAAO,GAAeA,GAM1B,QACI,OAAO,GAAeA,EAAgB,KAElD,EAEAI,EAAG,SAAUvO,EAAMkG,EAAOjG,GACtB,MAAMkO,EAAiBiG,GAAkBnU,EAAQsQ,SAAUvQ,GAC3D,OAAQkG,GAEJ,IAAK,IACL,IAAK,KACL,IAAK,MACD,MAAO,MAqDvB,SAA6BjF,EAAQ2N,EAAY,IAC7C,MAAMC,EAAO5N,EAAS,EAAI,IAAM,IAC1B6N,EAAYlP,KAAKC,IAAIoB,GACrB4M,EAAQjO,KAAKyU,MAAMvF,EAAY,IAC/BC,EAAUD,EAAY,GAC5B,OAAgB,IAAZC,EACOF,EAAO9L,OAAO8K,GAElBgB,EAAO9L,OAAO8K,GAASe,EAAY,GAAgBG,EAAS,EACvE,CA9D+B,CAAoBZ,EAAgB,KAGvD,QACI,MAAO,MAAQ,GAAeA,EAAgB,KAE1D,EAEAM,EAAG,SAAUzO,EAAMkG,EAAOjG,GACtB,OAAQiG,GAEJ,IAAK,IACL,IAAK,KACL,IAAK,MACD,OAAOmK,EAAmB,QAASrQ,EAAMC,GAG7C,QACI,OAAOoQ,EAAmB,OAAQrQ,EAAMC,GAEpD,GAEJ,SAASmU,GAAkB7D,EAAU+D,GACjC,MAAMC,EAAiBhE,EACjB,EAAgBA,EAAU+D,GAAc,GAjFnB,IAkFrBA,GAAcpT,qBAAuB,EAC3C,GAAI4F,OAAO3G,MAAMoU,GACb,MAAM,IAAIlU,WAAW,gCAAkCkQ,GAE3D,OAAOgE,CACX,CACA,SAAS,GAAgB7U,EAAQC,GAC7B,MAAMkP,EAAOnP,EAAS,EAAI,IAAM,GAChC,IAAI8U,EAAS5U,KAAKC,IAAIH,GAAQN,WAC9B,KAAOoV,EAAOlP,OAAS3F,GACnB6U,EAAS,IAAMA,EAEnB,OAAO3F,EAAO2F,CAClB,CACA,SAAS,GAAevT,EAAQ2N,EAAY,IACxC,MAAMC,EAAO5N,EAAS,EAAI,IAAM,IAC1B6N,EAAYlP,KAAKC,IAAIoB,GAG3B,OAAO4N,EAFO,GAAgBjP,KAAKyU,MAAMvF,EAAY,IAAK,GAEpCF,EADN,GAAgBhP,KAAKyU,MAAMvF,EAAY,IAAK,EAEhE,CACA,SAAS,GAAkC7N,EAAQ2N,GAC/C,OAAI3N,EAAS,IAAO,GACHA,EAAS,EAAI,IAAM,KAClB,GAAgBrB,KAAKC,IAAIoB,GAAU,GAAI,GAElD,GAAeA,EAAQ2N,EAClC,CCpGO,SAAS,GAAgC5O,GAC5C,MAAM6I,EAAU,IAAIvJ,KAAKA,KAAKwJ,IAAI9I,EAAKgB,cAAehB,EAAKe,WAAYf,EAAKa,UAAWb,EAAKqB,WAAYrB,EAAKsB,aAActB,EAAKuB,aAAcvB,EAAK+I,oBAEnJ,OADAF,EAAQG,eAAehJ,EAAKgB,gBACpBhB,GAAQ6I,CACpB,CCdO,MAAM4L,GAAY,0ECEnB,GAAuB,KACvB,GAAyB,IACzBC,GAA4B,EAC5B,GAAW,CACbC,gBAAiB,wBACjBrF,YAAa,mBACbsF,UAAW,IAEXC,GAAI,YACJC,IAAK,CACD,gBACA,gBACA,iBAEJC,KAAM,WACNC,MAAO,CACH,eACA,eACA,gBAGJC,GAAI,aACJC,IAAK,cACLC,KAAM,uBACNC,IAAK,eACLC,KAAM,wBACNC,GAAI,sBACJC,KAAM,+BACNC,OAAQ,wCAERjF,SAAUkE,IA4CP,SAAS,GAAOzV,EAAUiB,EAAU,CAAC,GACxC,GAAIwV,UAAUnQ,OAAS,EACnB,MAAM,IAAIoQ,UAAU,iCAAmCD,UAAUnQ,OAAS,YAE9E,GAAiB,OAAbtG,EACA,OAAO,IAAIM,KAAKE,KAEpB,MAAMmW,EAA+C,MAA5B1V,EAAQ0V,iBAA2BjB,GAA4B5N,OAAO7G,EAAQ0V,kBACvG,GAAyB,IAArBA,GAA+C,IAArBA,GAA+C,IAArBA,EACpD,MAAM,IAAItV,WAAW,sCAGzB,GAAIrB,aAAoBM,MACC,iBAAbN,GAAsE,kBAA7CE,OAAOC,UAAUC,SAASC,KAAKL,GAEhE,OAAO,IAAIM,KAAKN,EAASoB,WAExB,GAAwB,iBAAbpB,GACiC,oBAA7CE,OAAOC,UAAUC,SAASC,KAAKL,GAC/B,OAAO,IAAIM,KAAKN,GAEf,GAAmD,oBAA7CE,OAAOC,UAAUC,SAASC,KAAKL,GACtC,OAAO,IAAIM,KAAKE,KAEpB,MAAMoW,EAiCV,SAAyBC,GACrB,MAAMD,EAAc,CAAC,EACrB,IACIE,EADAC,EAAQ,GAASpB,gBAAgBzD,KAAK2E,GAiB1C,GAfKE,GAYDH,EAAY5V,KAAO+V,EAAM,GACzBD,EAAaC,EAAM,KAZnBA,EAAQ,GAASzG,YAAY4B,KAAK2E,GAC9BE,GACAH,EAAY5V,KAAO+V,EAAM,GACzBD,EAAaC,EAAM,KAGnBH,EAAY5V,KAAO,KACnB8V,EAAaD,IAOjBC,EAAY,CACZ,MAAM5P,EAAQ,GAASqK,SAASW,KAAK4E,GACjC5P,GACA0P,EAAYrS,KAAOuS,EAAWzP,QAAQH,EAAM,GAAI,IAChD0P,EAAYrF,SAAWrK,EAAM,GAAG8P,QAGhCJ,EAAYrS,KAAOuS,CAE3B,CACA,OAAOF,CACX,CA/DwBK,CAAgBjX,IAC9B,KAAEqL,EAAI,eAAE6L,GA+DlB,SAAmBL,EAAYF,GAC3B,GAAIE,EAAY,CACZ,MAAMM,EAAa,GAASrB,IAAIa,GAC1BS,EAAe,GAASpB,MAAMW,GAEpC,IAAIzP,EAAQ,GAAS6O,KAAK7D,KAAK2E,IAAeO,EAAalF,KAAK2E,GAChE,GAAI3P,EAAO,CACP,MAAMmQ,EAAanQ,EAAM,GACzB,MAAO,CACHmE,KAAMtC,SAASsO,EAAY,IAC3BH,eAAgBL,EAAW/P,MAAMuQ,EAAW/Q,QAEpD,CAGA,GADAY,EAAQ,GAAS2O,GAAG3D,KAAK2E,IAAeM,EAAWjF,KAAK2E,GACpD3P,EAAO,CACP,MAAMoQ,EAAgBpQ,EAAM,GAC5B,MAAO,CACHmE,KAAoC,IAA9BtC,SAASuO,EAAe,IAC9BJ,eAAgBL,EAAW/P,MAAMwQ,EAAchR,QAEvD,CACJ,CAEA,MAAO,CACH+E,KAAM,KAEd,CA1FqCkM,CAAUX,EAAY5V,KAAM2V,GACvD3V,EA0FV,SAAmB6V,EAAYxL,GAE3B,GAAa,OAATA,EACA,OAAO,KAEX,IAAIrK,EACAc,EACAiM,EAEJ,IAAK8I,IAAeA,EAAWvQ,OAG3B,OAFAtF,EAAO,IAAIV,KAAK,GAChBU,EAAKgJ,eAAeqB,GACbrK,EAGX,IAAIkG,EAAQ,GAAS+O,GAAG/D,KAAK2E,GAC7B,GAAI3P,EAGA,OAFAlG,EAAO,IAAIV,KAAK,GAChBwB,EAAQiH,SAAS7B,EAAM,GAAI,IAAM,EAC5BsQ,GAAanM,EAAMvJ,IAGxBd,EAAKgJ,eAAeqB,EAAMvJ,GACnBd,GAHI,IAAIV,KAAKE,KAOxB,GADA0G,EAAQ,GAASgP,IAAIhE,KAAK2E,GACtB3P,EAAO,CACPlG,EAAO,IAAIV,KAAK,GAChB,MAAM6N,EAAYpF,SAAS7B,EAAM,GAAI,IACrC,OA8GR,SAA+BmE,EAAM8C,GACjC,GAAIA,EAAY,EACZ,OAAO,EAEX,MAAMsJ,EAAaC,GAAgBrM,GACnC,QAAIoM,GAActJ,EAAY,SAGzBsJ,GAActJ,EAAY,IAInC,CA1HawJ,CAAsBtM,EAAM8C,IAGjCnN,EAAKgJ,eAAeqB,EAAM,EAAG8C,GACtBnN,GAHI,IAAIV,KAAKE,IAIxB,CAGA,GADA0G,EAAQ,GAASiP,KAAKjE,KAAK2E,GACvB3P,EAAO,CACPlG,EAAO,IAAIV,KAAK,GAChBwB,EAAQiH,SAAS7B,EAAM,GAAI,IAAM,EACjC,MAAMtF,EAAMmH,SAAS7B,EAAM,GAAI,IAC/B,OAAKsQ,GAAanM,EAAMvJ,EAAOF,IAG/BZ,EAAKgJ,eAAeqB,EAAMvJ,EAAOF,GAC1BZ,GAHI,IAAIV,KAAKE,IAIxB,CAGA,GADA0G,EAAQ,GAASkP,IAAIlE,KAAK2E,GACtB3P,EAEA,OADA6G,EAAOhF,SAAS7B,EAAM,GAAI,IAAM,EAC3B0Q,GAAiB7J,GAGf8J,GAAiBxM,EAAM0C,GAFnB,IAAIzN,KAAKE,KAMxB,GADA0G,EAAQ,GAASmP,KAAKnE,KAAK2E,GACvB3P,EAAO,CACP6G,EAAOhF,SAAS7B,EAAM,GAAI,IAAM,EAChC,MAAMmH,EAAYtF,SAAS7B,EAAM,GAAI,IAAM,EAC3C,OAAK0Q,GAAiB7J,EAAMM,GAGrBwJ,GAAiBxM,EAAM0C,EAAMM,GAFzB,IAAI/N,KAAKE,IAGxB,CAEA,OAAO,IACX,CA/JiBsX,CAAUZ,EAAgB7L,GACvC,GAAa,OAATrK,GAAiBG,MAAMH,EAAKI,WAC5B,OAAO,IAAId,KAAKE,KAEpB,GAAIQ,EAAM,CACN,MAAM+W,EAAY/W,EAAKI,UACvB,IACIa,EADAsC,EAAO,EAEX,GAAIqS,EAAYrS,OACZA,EAuJZ,SAAmBuS,GACf,IAAIjI,EACAkB,EAEA7I,EAAQ,GAASoP,GAAGpE,KAAK4E,GAC7B,GAAI5P,EAEA,OADA2H,EAAQmJ,WAAW9Q,EAAM,GAAGG,QAAQ,IAAK,MACpC4Q,GAAapJ,GAGVA,EAAQ,GAAM,GAFXrO,IAMf,GADA0G,EAAQ,GAASqP,KAAKrE,KAAK4E,GACvB5P,EAGA,OAFA2H,EAAQ9F,SAAS7B,EAAM,GAAI,IAC3B6I,EAAUiI,WAAW9Q,EAAM,GAAGG,QAAQ,IAAK,MACtC4Q,GAAapJ,EAAOkB,GAGjBlB,EAAQ,GAAM,GAAuBkB,EAAU,GAF5CvP,IAMf,GADA0G,EAAQ,GAASsP,OAAOtE,KAAK4E,GACzB5P,EAAO,CACP2H,EAAQ9F,SAAS7B,EAAM,GAAI,IAC3B6I,EAAUhH,SAAS7B,EAAM,GAAI,IAC7B,MAAMgR,EAAUF,WAAW9Q,EAAM,GAAGG,QAAQ,IAAK,MACjD,OAAK4Q,GAAapJ,EAAOkB,EAASmI,GAG1BrJ,EAAQ,GAAM,GAAuBkB,EAAU,GAAmC,IAAVmI,EAFrE1X,GAGf,CAEA,OAAO,IACX,CA1LmB2X,CAAUvB,EAAYrS,MAChB,OAATA,GAAiBpD,MAAMoD,IACvB,OAAO,IAAIjE,KAAKE,KAGxB,GAAIoW,EAAYrF,UAAYtQ,EAAQsQ,UAEhC,GADAtP,EAAS,EAAgB2U,EAAYrF,UAAYtQ,EAAQsQ,SAAU,IAAIjR,KAAKyX,EAAYxT,IACpFpD,MAAMc,GACN,OAAO,IAAI3B,KAAKE,UAKpByB,EAAS,GAAgC,IAAI3B,KAAKyX,EAAYxT,IAC9DtC,EAAS,GAAgC,IAAI3B,KAAKyX,EAAYxT,EAAOtC,IAEzE,OAAO,IAAI3B,KAAKyX,EAAYxT,EAAOtC,EACvC,CAEI,OAAO,IAAI3B,KAAKE,IAExB,CAsKA,SAASqX,GAAiBO,EAAarK,EAAMnM,GACzCmM,EAAOA,GAAQ,EACfnM,EAAMA,GAAO,EACb,MAAMZ,EAAO,IAAIV,KAAK,GACtBU,EAAKgJ,eAAeoO,EAAa,EAAG,GACpC,MACMnN,EAAc,EAAP8C,EAAWnM,EAAM,GADHZ,EAAKqX,aAAe,GAG/C,OADArX,EAAKsX,WAAWtX,EAAKuX,aAAetN,GAC7BjK,CACX,CAEA,MAAMwX,GAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7DC,GAA0B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7E,SAASf,GAAgBrM,GACrB,OAAOA,EAAO,KAAQ,GAAMA,EAAO,GAAM,GAAKA,EAAO,KAAQ,CACjE,CACA,SAASmM,GAAanM,EAAMvJ,EAAOd,GAC/B,GAAIc,EAAQ,GAAKA,EAAQ,GACrB,OAAO,EAEX,GAAY,MAARd,EAAc,CACd,GAAIA,EAAO,EACP,OAAO,EAEX,MAAMyW,EAAaC,GAAgBrM,GACnC,GAAIoM,GAAczW,EAAOyX,GAAwB3W,GAC7C,OAAO,EAEX,IAAK2V,GAAczW,EAAOwX,GAAc1W,GACpC,OAAO,CAEf,CACA,OAAO,CACX,CAcA,SAAS8V,GAAiB7J,EAAMnM,GAC5B,QAAImM,EAAO,GAAKA,EAAO,IAGZ,MAAPnM,IAAgBA,EAAM,GAAKA,EAAM,GAIzC,CACA,SAASqW,GAAapJ,EAAOkB,EAASmI,GAClC,QAAIrJ,EAAQ,GAAKA,GAAS,IAGX,MAAXkB,IAAoBA,EAAU,GAAKA,GAAW,KAGnC,MAAXmI,IAAoBA,EAAU,GAAKA,GAAW,IAItD,CC3WA,MAAMQ,GAA2B,iCCoB1B,SAASC,GAAiB3X,EAAMuQ,EAAUqH,EAAW3X,GAMxD,OD8RG,SAAgBD,EAAM4X,EAAW3X,EAAU,CAAC,GAE/C,MAAM4X,GADND,EAAY7U,OAAO6U,IACO/S,MAAM6S,IAChC,GAAIG,EAAS,CACT,MAAMtM,EAAI,GAAOtL,EAAQqU,cAAgBtU,EAAMC,GAG/C2X,EAAYC,EAAQC,QAAO,SAAUtX,EAAQ0F,GACzC,GAAiB,MAAbA,EAAM,GACN,OAAO1F,EAEX,MAAMoT,EAAMpT,EAAOuX,QAAQ7R,GACrB8R,EAA8C,MAApBxX,EAAOoT,EAAM,GACvCqE,EAAWzX,EAAO6F,QAAQH,EAAO,IAAM,GAAWA,EAAM,IAAIqF,EAAGrF,EAAOjG,GAAW,KAGvF,OAAO+X,EACDC,EAASC,UAAU,EAAGtE,EAAM,GAAKqE,EAASC,UAAUtE,EAAM,GAC1DqE,CACV,GAAGL,EACP,CACA,OTNG,SAAgB5X,EAAM4X,EAAW3X,GACtC,MAAMoI,EAAiBC,IACjByB,EAAS9J,GAAS8J,QAAU1B,EAAe0B,QAAU,EAErD3B,EACJnI,GAASmI,uBACTnI,GAAS8J,QAAQ9J,SAASmI,uBAC1BC,EAAeD,uBACfC,EAAe0B,QAAQ9J,SAASmI,uBAChC,EAEID,EACJlI,GAASkI,cACTlI,GAAS8J,QAAQ9J,SAASkI,cAC1BE,EAAeF,cACfE,EAAe0B,QAAQ9J,SAASkI,cAChC,EAEImM,EAAevV,EAAOiB,GAE5B,IAAK4P,EAAQ0E,GACX,MAAM,IAAIjU,WAAW,sBAGvB,IAAI0V,EAAQ6B,EACT/S,MAAMiL,GACNqI,KAAKD,IACJ,MAAME,EAAiBF,EAAU,GACjC,MAAuB,MAAnBE,GAA6C,MAAnBA,GAErBC,EADelJ,EAAeiJ,IAChBF,EAAWnO,EAAO7G,YAElCgV,CAAS,IAEjB1W,KAAK,IACLqD,MAAMgL,GACNsI,KAAKD,IAEJ,GAAkB,OAAdA,EACF,MAAO,CAAEI,SAAS,EAAOtU,MAAO,KAGlC,MAAMoU,EAAiBF,EAAU,GACjC,GAAuB,MAAnBE,EACF,MAAO,CAAEE,SAAS,EAAOtU,MAAOkM,EAAmBgI,IAGrD,GAAIhM,EAAWkM,GACb,MAAO,CAAEE,SAAS,EAAMtU,MAAOkU,GAGjC,GAAIE,EAAevT,MAAMoL,GACvB,MAAM,IAAI5P,WACR,iEACE+X,EACA,KAIN,MAAO,CAAEE,SAAS,EAAOtU,MAAOkU,EAAW,IAI3CnO,EAAOpD,SAAS4R,eAClBxC,EAAQhM,EAAOpD,SAAS4R,aAAajE,EAAcyB,IAGrD,MAAMyC,EAAmB,CACvBpQ,wBACAD,eACA4B,UAGF,OAAOgM,EACJoC,KAAKM,IACJ,IAAKA,EAAKH,QAAS,OAAOG,EAAKzU,MAE/B,MAAMkC,EAAQuS,EAAKzU,MAYnB,QATI/D,GAASyY,6BHjZZ,SAAkCxS,GACvC,OAAOwJ,EAAgBnK,KAAKW,EAC9B,CGgZUyS,CAAyBzS,KACzBjG,GAAS2Y,8BHvZZ,SAAmC1S,GACxC,OAAOuJ,EAAiBlK,KAAKW,EAC/B,CGsZU2S,CAA0B3S,KHhZ7B,SAAmCA,EAAO5F,EAAQ6P,GACvD,MAAM2I,EAKR,SAAiB5S,EAAO5F,EAAQ6P,GAC9B,MAAM4I,EAAuB,MAAb7S,EAAM,GAAa,QAAU,oBAC7C,MAAO,SAASA,EAAMyH,gCAAgCzH,aAAiB5F,uBAA4ByY,oBAA0B5I,kFAC/H,CARmB6I,CAAQ9S,EAAO5F,EAAQ6P,GAExC,GADA8I,QAAQC,KAAKJ,GACTnJ,EAAYwJ,SAASjT,GAAQ,MAAM,IAAI7F,WAAWyY,EACxD,CG8YQM,CAA0BlT,EAAO0R,EAAW7U,OAAO/C,KAI9CqZ,EADWnN,EAAWhG,EAAM,KAClBoO,EAAcpO,EAAO6D,EAAOpD,SAAU6R,EAAiB,IAEzEhX,KAAK,GACV,CStFW,CAAcxB,EAAM4X,EAAW3X,EAC1C,CCpTW,CCHJ,SAAqBD,EAAMuQ,EAAUtQ,GAExC,MAAMqZ,EAAqB,EAAgB/I,EAD3CvQ,EAAO,GAAOA,EAAMC,IACuC,GACrDsL,EAAI,IAAIjM,KAAKU,EAAKI,UAAYkZ,GAC9BC,EAAa,IAAIja,KAAK,GAG5B,OAFAia,EAAW3P,YAAY2B,EAAEiO,iBAAkBjO,EAAEkO,cAAelO,EAAEgM,cAC9DgC,EAAW5Q,SAAS4C,EAAEmO,cAAenO,EAAEoO,gBAAiBpO,EAAEqO,gBAAiBrO,EAAEsO,sBACtEN,CACX,CDLkBO,CAAY9Z,EAAMuQ,EAAU,CAAEA,UAL5CtQ,EAAU,IACHA,EACHsQ,WACA+D,aAActU,IAE4CuQ,WAAaqH,EAAW3X,EAC1F,CE5BA,MAAM8Z,GAAa,CAAC,MAAO,SAAU,QAEtB,MAAMC,GACnB,GACA,GACA,GACA,GACA,GAEAza,WAAAA,CAAY0a,EAAOC,EAAMC,EAAUC,GAA4B,IAAnBC,EAAS5E,UAAAnQ,OAAA,QAAAoL,IAAA+E,UAAA,IAAAA,UAAA,GACnD6E,KAAKL,MAAQA,EACbK,KAAKJ,KAAOA,EACZI,KAAKH,SAAWA,EAChBG,KAAKF,QAAUA,EACfE,MAAK,EAAaD,CACpB,CAEA,SAAIJ,GACF,OAAOK,MAAK,CACd,CAEA,SAAIL,CAAMM,GACRD,MAAK,EAASvX,OAAOwX,EACvB,CAEA,QAAIL,GACF,OAAOI,MAAK,CACd,CAEA,QAAIJ,CAAKM,GACPF,MAAK,EAAQvX,OAAOyX,EACtB,CAEA,YAAIL,GACF,OAAOG,MAAK,CACd,CAEA,YAAIH,CAASM,GAEX,IAAIV,GAAWZ,SAASpW,OAAO0X,GAAe9M,eAG5C,MAAM,IAAI+M,MAAM,0BAFhBJ,MAAK,EAAYG,CAIrB,CAEA,aAAIJ,GACF,OAAOC,MAAK,CACd,CAEAK,eAAAA,GACEL,MAAK,GAAcA,KAAKD,SAC1B,CAEA,WAAID,GACF,OAAOE,MAAK,CACd,CAEA,WAAIF,CAAQA,GAEV,MAAM7J,EAAWC,KAAKC,iBAAiBmK,kBAAkBrK,SACzD+J,MAAK,EAAW,IAAIhb,KCpCjB,SAAuBU,EAAMuQ,EAAUtQ,GAC1C,GAAoB,iBAATD,IAAsBA,EAAK6E,MAAM4P,IACxC,OAAO,GAAOzU,EAAM,IAAKC,EAASsQ,aAGtC,MAAMsK,EAAMnJ,GADZ1R,EAAO,GAAOA,EAAMC,IACQe,cAAehB,EAAKe,WAAYf,EAAKa,UAAWb,EAAKqB,WAAYrB,EAAKsB,aAActB,EAAKuB,aAAcvB,EAAK+I,mBAAmB3I,UACrJkZ,EAAqB,EAAgB/I,EAAU,IAAIjR,KAAKub,IAC9D,OAAO,IAAIvb,KAAKub,EAAMvB,EAC1B,CD4B6BwB,CAAcV,EAAS7J,GAClD,CAEAwK,eAAAA,GACE,MAAMxK,EAAWC,KAAKC,iBAAiBmK,kBAAkBrK,SACzD,OAAOoH,GAAiB2C,KAAKF,QAAS7J,EAAU,eAClD,CAEAyK,MAAAA,GACE,MAAO,CACLf,MAAOK,MAAK,EACZJ,KAAMI,MAAK,EACXH,SAAUG,KAAKH,SACfC,QAASE,KAAKF,QACdC,UAAWC,MAAK,EAEpB,CAEA,eAAOW,CAASC,GACd,OAAO,IAAIlB,GACTkB,EAASjB,MACTiB,EAAShB,KACTgB,EAASf,SACTe,EAASd,QACTc,EAASb,UAEb,EEvFa,MAAMc,GACnB,GACA,GAEA5b,WAAAA,CAAY0a,GACVK,KAAKL,MAAQA,EACbK,MAAK,EAAS,EAChB,CAEA,SAAIL,GACF,OAAOK,MAAK,CACd,CAEA,SAAIL,CAAMM,GACRD,MAAK,EAASvX,OAAOwX,EACvB,CAEA,SAAIa,GACF,OAAOd,MAAK,CACd,CAEAe,OAAAA,CAAQC,GACN,KAAIA,aAAgBtB,IAGlB,MAAM,IAAIU,MAAM,uBAFhBJ,MAAK,EAAOiB,KAAKD,EAIrB,CAEAE,gBAAAA,CAAiBvB,EAAOC,EAAMC,EAAUC,GACtC,MAAMkB,EAAO,IAAItB,GAAKC,EAAOC,EAAMC,EAAUC,GAE7C,OADAE,KAAKe,QAAQC,GACNA,CACT,CAEAG,UAAAA,CAAWvT,GACToS,MAAK,EAAOoB,OAAOxT,EAAO,EAC5B,CAEAyT,OAAAA,CAAQzT,GACN,OAAOoS,MAAK,EAAOpS,EACrB,CAEA8S,MAAAA,GACE,MAAO,CACLf,MAAOK,MAAK,EACZc,MAAOd,MAAK,EAAOnC,KAAKmD,GAASA,EAAKN,WAE1C,CAEA,eAAOC,CAASW,GACd,MAAMC,EAAU,IAAIV,GAAQS,EAAY3B,OAIxC,OAHA4B,GAAQ,EAASD,EAAYR,MAAMjD,KAAK+C,GACtClB,GAAKiB,SAASC,KAETW,CACT,ECxDa,MAAMC,GACnB,GAEAvc,WAAAA,GACE+a,MAAK,EAAY,GACjBA,KAAKyB,MACP,CAEAA,IAAAA,GAEE,IACE,MAAMzN,EAAI,yBACV0N,aAAaC,QAAQ3N,EAAGA,GACxB0N,aAAaE,WAAW5N,EAC1B,CAAE,MAAOhB,GACP2L,QAAQkD,IAAI7O,EACd,CAEI0O,aAAaI,QAAQ,aACvB9B,MAAK,GAET,CAEA,KACE,MAAM+B,EAAiBC,KAAKC,MAAMP,aAAaI,QAAQ,aAEvD9B,MAAK,EAAY+B,EAAelE,KAAKqE,GACnCrB,GAAQF,SAASuB,IAErB,CAEAC,aAAAA,CAAcxC,GACZ,MAAM4B,EAAU,IAAIV,GAAQlB,GAG5B,OAFAK,MAAK,EAAUiB,KAAKM,GAEbA,CACT,CAEAa,UAAAA,CAAWxU,GACT,OAAOoS,MAAK,EAAUpS,EACxB,CAEAyU,aAAAA,CAAczU,GACZoS,MAAK,EAAUoB,OAAOxT,EAAO,EAC/B,CAEA,YAAI0U,GACF,OAAOtC,MAAK,CACd,CAEAuC,WAAAA,GACEb,aAAaC,QACX,WACAK,KAAKQ,UAAUxC,MAAK,EAAUnC,KAAK4E,GAASA,EAAK/B,YAErD,ECtDa,MAAMgC,GACnB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAEAzd,WAAAA,GACE+a,MAAK,EAAW2C,SAASC,cAAc,YACvC5C,MAAK,EAAS2C,SAASC,cAAc,UACrC5C,MAAK,EAAc2C,SAASC,cAAc,aAC1C5C,MAAK,EAAgB2C,SAASC,cAAc,gBAC5C5C,MAAK,EAAc2C,SAASC,cAAc,gBAC1C5C,MAAK,EAAY2C,SAASC,cAAc,cACxC5C,MAAK,EAAa2C,SAASC,cAAc,eACzC5C,MAAK,EAAY2C,SAASC,cAAc,cACxC5C,MAAK,EAAgB2C,SAASC,cAAc,kBAC5C5C,MAAK,EAAY2C,SAASC,cAAc,cACxC5C,MAAK,EAAY2C,SAASC,cAAc,cACxC5C,MAAK,EAAY9J,KAAKC,iBAAiBmK,kBAAkBrK,SACzD+J,MAAK,EAAiB2C,SAASC,cAAc,gBAC7C5C,MAAK,EAAiB2C,SAASC,cAAc,mBAC7C5C,MAAK,EAAe2C,SAASC,cAAc,iBAC3C5C,MAAK,EAAgB2C,SAASC,cAAc,kBAC5C5C,MAAK,EAAmB2C,SAASC,cAAc,mBAC/C5C,MAAK,EAAe2C,SAASC,cAAc,iBAC3C5C,MAAK,EAAe2C,SAASC,cAAc,iBAC3C5C,MAAK,EAAgB2C,SAASC,cAAc,iBAC9C,CAGA,GAAY5B,GACV,MAAM6B,EAAcF,SAASG,cAAc,OAC3CD,EAAYE,UAAUC,IAAI,QAE1B,MAAMC,EAAgBjD,MAAK,EAAqBgB,GAC1CkC,EAAclD,MAAK,EAAmBgB,GAK5C,OAHA6B,EAAYM,YAAYF,GACxBJ,EAAYM,YAAYD,GAEjBL,CACT,CAEApB,IAAAA,GACEkB,SAASC,cAAc,gBAAgBQ,YAAcpD,MAAK,EACxDhb,KAAKsT,OAGP0H,MAAK,EAAUqD,aACb,MACA5d,EAAUT,KAAKsT,MAAO,CAAErS,eAAgB,SAE5C,CAEA,GAAqB+a,GACnB,MAAMiC,EAAgBN,SAASG,cAAc,OAC7CG,EAAcF,UAAUC,IAAI,YAE5B,MAAMM,EAAWX,SAASG,cAAc,UACxCQ,EAASP,UAAUC,IACjB,gBACGhC,EAAKjB,UAAY,UAAY,aAGlC,MAAMwD,EAAYZ,SAASG,cAAc,QACzCS,EAAUR,UAAUC,IAAI,SACxBO,EAAUH,YAAcpC,EAAKrB,MAE7B,MAAM6D,EAAWb,SAASG,cAAc,OACxCU,EAAST,UAAUC,IAAI,aAEvBQ,EAASL,YAAYG,GACrBE,EAASL,YAAYI,GAErB,MAAME,EAAYd,SAASG,cAAc,OACzCW,EAAUV,UAAUC,IAAI,cAExB,MAAMU,EAAcf,SAASG,cAAc,QAC3CY,EAAYX,UAAUC,IAAI,QAC1BU,EAAYN,YAAcpD,MAAK,EAAkBgB,EAAKlB,SAEtD,MAAM6D,EAAUhB,SAASG,cAAc,UACvCa,EAAQZ,UAAUC,IAAI,gBAAiB,QAEvC,MAAMY,EAAYjB,SAASG,cAAc,UACzCc,EAAUb,UAAUC,IAAI,gBAAiB,UAEzC,MAAMa,EAAalB,SAASG,cAAc,UAW1C,OAVAe,EAAWd,UAAUC,IAAI,gBAAiB,aAE1CS,EAAUN,YAAYO,GACtBD,EAAUN,YAAYQ,GACtBF,EAAUN,YAAYS,GACtBH,EAAUN,YAAYU,GAEtBZ,EAAcE,YAAYK,GAC1BP,EAAcE,YAAYM,GAEnBR,CACT,CAEA,GAAmBjC,GACjB,MAAMkC,EAAcP,SAASG,cAAc,OAC3CI,EAAYH,UAAUC,IAAI,gBAE1B,MAAMc,EAAkBnB,SAASG,cAAc,KAC/CgB,EAAgBV,YAAcpC,EAAKpB,KAEnC,MAAMmE,EAAepB,SAASG,cAAc,OAO5C,OANAiB,EAAaX,YAAcpC,EAAKnB,SAChCkE,EAAahB,UAAUC,IAAI,GAAGhC,EAAKnB,WAAY,YAE/CqD,EAAYC,YAAYW,GACxBZ,EAAYC,YAAYY,GAEjBb,CACT,CAEA,KACE,MAAMpC,EAAQd,MAAK,EAAOgE,iBAAiB,SAE3C,IAAI7Q,EAAI,EACR2N,EAAMmD,SAASjD,IACbA,EAAKkD,QAAQtW,MAAQuF,EACrBA,GAAG,GAEP,CAEA,KACE,MAAM2N,EAAQd,MAAK,EAASgE,iBAAiB,wBAE7C,IAAI7Q,EAAI,EACR2N,EAAMmD,SAASjD,IACbA,EAAKkD,QAAQtW,MAAQuF,EACrBA,GAAG,GAEP,CAEA,GAAkBzN,GAChB,OAAO2X,GAAiB3X,EAAMsa,MAAK,EAAW,eAChD,CAEAkB,gBAAAA,CAAiBF,EAAMpT,GACrB,MAAMiV,EAAc7C,MAAK,EAAYgB,GAErC6B,EAAYqB,QAAQtW,MAAQA,EAC5BoS,MAAK,EAAOmD,YAAYN,EAC1B,CAEA,GAAwB7B,EAAMmD,EAAcvW,GAC1C,MAAMiV,EAAc7C,MAAK,EAAYgB,GAErC6B,EAAYqB,QAAQC,aAAeA,EACnCtB,EAAYqB,QAAQtW,MAAQA,EAC5BoS,MAAK,EAAOmD,YAAYN,EAC1B,CAEA1B,UAAAA,CAAWvT,GACT,MAAMoT,EAAOhB,MAAK,EAAO4C,cAAc,qBAAqBhV,OAC5DoS,MAAK,EAAOoE,YAAYpD,GACxBhB,MAAK,GACP,CAEAqE,QAAAA,CAASrD,GACP,MAAMsD,EAAUtE,MAAK,EAAO4C,cAC1B,qBAAqB5B,EAAKuD,UAEtBhB,EAAYe,EAAQ1B,cAAc,UAClC4B,EAAWF,EAAQ1B,cAAc,SACjCkB,EAAkBQ,EAAQ1B,cAAc,KACxCmB,EAAeO,EAAQ1B,cAAc,aAE3CW,EAAUH,YAAcpC,EAAKrB,MAC7B6E,EAASpB,YAAcpD,MAAK,EAAkBgB,EAAKlB,SACnDgE,EAAgBV,YAAcpC,EAAKyD,YACnCV,EAAahB,UAAY,YAAY/B,EAAKnB,WAC1CkE,EAAaX,YAAcpC,EAAKnB,QAClC,CAEA6E,iBAAAA,CAAkB9W,GAChB,MAAM0W,EAAUtE,MAAK,EAAO4C,cAAc,qBAAqBhV,OACzD+W,EACoC,OAAxCL,EAAQ1B,cAAc,cAClB0B,EAAQ1B,cAAc,YACtB0B,EAAQ1B,cAAc,cACtBM,EAAcoB,EAAQ1B,cAAc,iBAEtC+B,EAAe5B,UAAU6B,SAAS,cACpCD,EAAe5B,UAAU8B,OAAO,aAChCF,EAAe5B,UAAUC,IAAI,WAC7BE,EAAY4B,MAAMC,QAAU,SAE5BJ,EAAe5B,UAAU8B,OAAO,WAChCF,EAAe5B,UAAUC,IAAI,aAC7BE,EAAY4B,MAAMC,QAAU,OAEhC,CAEAC,wBAAAA,CAAyBpX,GACvB,MAAM0W,EAAUtE,MAAK,EAAO4C,cAAc,qBAAqBhV,OACzDqX,EACoC,OAAxCX,EAAQ1B,cAAc,cAClB0B,EAAQ1B,cAAc,YACtB0B,EAAQ1B,cAAc,cAExBqC,EAAmBlC,UAAU6B,SAAS,cACxCK,EAAmBlC,UAAU8B,OAAO,aACpCI,EAAmBlC,UAAUC,IAAI,aAEjCiC,EAAmBlC,UAAU8B,OAAO,WACpCI,EAAmBlC,UAAUC,IAAI,aAErC,CAEAkC,6BAAAA,CAA8Bf,EAAcvW,GAC1C,MAAM0W,EAAUtE,MAAK,EAAO4C,cAC1B,6BAA6BuB,mBAA8BvW,OAEvDqX,EACoC,OAAxCX,EAAQ1B,cAAc,cAClB0B,EAAQ1B,cAAc,YACtB0B,EAAQ1B,cAAc,cAExBqC,EAAmBlC,UAAU6B,SAAS,cACxCK,EAAmBlC,UAAU8B,OAAO,aACpCI,EAAmBlC,UAAUC,IAAI,aAEjCiC,EAAmBlC,UAAU8B,OAAO,WACpCI,EAAmBlC,UAAUC,IAAI,aAErC,CAEAmC,kBAAAA,CAAmBnE,EAAMpT,GACvBoS,MAAK,EAAUtW,MAAQjB,OAAOmF,GAC9BoS,MAAK,EAAWtW,MAAQsX,EAAKrB,MAC7BK,MAAK,EAAUtW,MAAQsX,EAAKpB,KAC5BI,MAAK,EAActW,MAAQsX,EAAKnB,SAChCG,MAAK,EAAUtW,MAAQjE,EAAUub,EAAKlB,QAAS,CAAE7Z,eAAgB,SACjE+Z,MAAK,EAActW,MAAQ,EAC7B,CAEA0b,uBAAAA,CAAwBpE,EAAMmD,EAAcvW,GAC1CoS,KAAKmF,mBAAmBnE,EAAMpT,GAC9BoS,MAAK,EAActW,MAAQjB,OAAO0b,EACpC,CAEAkB,qBAAAA,CAAsB9D,EAAS3T,GAC7BoS,MAAK,EAAatW,MAAQjB,OAAOmF,GACjCoS,MAAK,EAActW,MAAQ6X,EAAQ5B,KACrC,CAGAwC,aAAAA,CAAcxC,EAAO/R,GACnB,MAAM0X,EAAa3C,SAASG,cAAc,MAC1CwC,EAAWvC,UAAUC,IAAI,WACzBsC,EAAWpB,QAAQtW,MAAQA,EAE3B,MAAM2X,EAAa5C,SAASG,cAAc,UAC1CyC,EAAW9O,KAAO,SAClB8O,EAAWxC,UAAUC,IAAI,eAEzB,MAAMwC,EAAe7C,SAASG,cAAc,QAC5C0C,EAAapC,YAAczD,EAE3B,MAAM8F,EAAkB9C,SAASG,cAAc,OAC/C2C,EAAgB1C,UAAUC,IAAI,oBAE9B,MAAMW,EAAUhB,SAASG,cAAc,UACvCa,EAAQZ,UAAUC,IAAI,gBAAiB,QAEvC,MAAMY,EAAYjB,SAASG,cAAc,UACzCc,EAAUb,UAAUC,IAAI,gBAAiB,UAEzCyC,EAAgBtC,YAAYQ,GAC5B8B,EAAgBtC,YAAYS,GAE5B2B,EAAWpC,YAAYqC,GACvBD,EAAWpC,YAAYsC,GACvBH,EAAWnC,YAAYoC,GACvB5C,SAASC,cAAc,iBAAiBO,YAAYmC,EACtD,CAEAI,QAAAA,CAASpD,GACPtC,MAAK,EAAO2F,kBAEZ,MAAMC,EAAWngB,EAAUT,KAAKsT,MAAO,CAAErS,eAAgB,SACzD,IAAK,IAAIkN,EAAI,EAAGA,EAAImP,EAAStX,OAAQmI,IACnC,IAAK,IAAI0S,EAAI,EAAGA,EAAIvD,EAASnP,GAAG2N,MAAM9V,OAAQ6a,IAE1CpgB,EAAU6c,EAASnP,GAAGkO,QAAQwE,GAAG/F,QAAS,CACxC7Z,eAAgB,UACZ2f,GAEN5F,MAAK,EAAwBsC,EAASnP,GAAGkO,QAAQwE,GAAI1S,EAAG0S,GAI9D7F,MAAK,EAAaoD,YAAc,QAChCpD,MAAK,EAAY+C,UAAUC,IAAI,iBAE/B,MAAM8C,EAAgBnD,SAASC,cAAc,WACvB,OAAlBkD,GACFA,EAAc/C,UAAU8B,OAAO,UAEdlC,SAASC,cAAc,6BAC/BG,UAAUC,IAAI,SAC3B,CAEAZ,UAAAA,CAAWb,EAAS3T,GAClBoS,MAAK,EAAO2F,kBACZ,IAAK,IAAIxS,EAAI,EAAGA,EAAIoO,EAAQT,MAAM9V,OAAQmI,IACxC6M,KAAKkB,iBAAiBK,EAAQT,MAAM3N,GAAIA,GAE1C6M,MAAK,EAAaoD,YAAc7B,EAAQ5B,MACxCK,MAAK,EAAY+C,UAAU8B,OAAO,iBAElC,MAAMiB,EAAgBnD,SAASC,cAAc,WACvB,OAAlBkD,GACFA,EAAc/C,UAAU8B,OAAO,UAEdlC,SAASC,cAC1B,wBAAwBhV,OAEfmV,UAAUC,IAAI,SAC3B,CAEA+C,WAAAA,CAAYxE,GACV,MAAM+D,EAAatF,MAAK,EAAS4C,cAC/B,wBAAwBrB,EAAQgD,UAEbe,EAAW1C,cAAc,gBACjCQ,YAAc7B,EAAQ5B,MAE/B2F,EAAWvC,UAAU6B,SAAS,YAChC5E,MAAK,EAAaoD,YAAc7B,EAAQ5B,MAE5C,CAEA0C,aAAAA,CAAczU,GACOoS,MAAK,EAAS4C,cAC/B,wBAAwBhV,OAEfiX,SACX7E,MAAK,GACP,CAEAgG,cAAAA,GAEwB,OADArD,SAASC,cAAc,aAEd,KAAzB5C,MAAK,EAAUtW,QACjBsW,MAAK,EAAUtW,MAAQjE,EAAUT,KAAKsT,MAAO,CAC3CrS,eAAgB,UAGpB+Z,MAAK,EAAYiG,YAErB,CAEAC,eAAAA,GACElG,MAAK,EAAYmG,OACnB,CAEAC,aAAAA,GACEpG,MAAK,EAAUqG,OACjB,CAEAC,iBAAAA,GACEtG,MAAK,EAAeiG,WACtB,CAEAM,kBAAAA,GACEvG,MAAK,EAAemG,OACtB,CAEAK,gBAAAA,GACExG,MAAK,EAAaqG,OACpB,CAGAI,iBAAAA,CAAkBC,GAChB1G,MAAK,EAAS2G,iBAAiB,SAAUC,IACvC,GAAIA,EAAMC,OAAO9D,UAAU6B,SAAS,eAAgB,CAClD,MAAMhX,EAAQH,SAASmZ,EAAMC,OAAOC,QAAQ,YAAY5C,QAAQtW,OAEhE8Y,EAAQ9Y,EACV,IAEJ,CAEAmZ,kBAAAA,CAAmBL,GACjB1G,MAAK,EAAY2G,iBAAiB,QAASD,EAC7C,CAEAM,kBAAAA,CAAmBN,GACjB1G,MAAK,EAAO2G,iBAAiB,SAAUC,IACrC,GAAIA,EAAMC,OAAO9D,UAAU6B,SAAS,QAAS,CAC3C,MAAMN,EAAUsC,EAAMC,OAAOC,QAAQ,SAC/BlZ,EAAQH,SAAS6W,EAAQJ,QAAQtW,OACjCuW,EAAeG,EAAQJ,QAAQC,aACjC1W,SAAS6W,EAAQJ,QAAQC,cACzB,KAEJuC,EAAQvC,EAAcvW,EACxB,IAEJ,CAEAqZ,mBAAAA,CAAoBP,GAClB1G,MAAK,EAAc2G,iBAAiB,QAASD,EAC/C,CAEAQ,cAAAA,CAAeR,GACb1G,MAAK,EAAU2G,iBAAiB,UAAU,KACxC,MAAM/F,EAAW,CACf2D,KAAMvE,MAAK,EAAUtW,MACrBiW,MAAOK,MAAK,EAAWtW,MACvB+a,YAAazE,MAAK,EAAUtW,MAC5BmW,SAAUG,MAAK,EAActW,MAC7BoW,QAASE,MAAK,EAAUtW,MACxBya,aAAcnE,MAAK,EAActW,OAGnCgd,EAAQ9F,EAAS,GAErB,CAEAuG,cAAAA,CAAeT,EAASU,GACtBpH,MAAK,EAAO2G,iBAAiB,SAAUC,IACrC,GAAIA,EAAMC,OAAO9D,UAAU6B,SAAS,UAAW,CAC7C,MAAMhX,EAAQH,SAASmZ,EAAMC,OAAOC,QAAQ,SAAS5C,QAAQtW,OAG7D,GAFsB+U,SAASC,cAAc,WAE1BG,UAAU6B,SAAS,SAE/B,CACL,MAAMT,EAAe1W,SACnBmZ,EAAMC,OAAOC,QAAQ,SAAS5C,QAAQC,cAExCiD,EAAajD,EAAcvW,EAC7B,MANE8Y,EAAQ9Y,EAOZ,IAEJ,CAEAyZ,qBAAAA,CAAsBX,GACpB1G,MAAK,EAAO2G,iBAAiB,SAAUC,IACrC,GACEA,EAAMC,OAAO9D,UAAU6B,SAAS,cAChCgC,EAAMC,OAAO9D,UAAU6B,SAAS,WAChC,CACA,MAAMhX,EAAQH,SAASmZ,EAAMC,OAAOC,QAAQ,SAAS5C,QAAQtW,OAE7D8Y,EAAQ9Y,EACV,IAEJ,CAEA0Z,4BAAAA,CAA6BZ,EAASU,GACpCpH,MAAK,EAAO2G,iBAAiB,SAAUC,IACrC,GACEA,EAAMC,OAAO9D,UAAU6B,SAAS,cAChCgC,EAAMC,OAAO9D,UAAU6B,SAAS,WAChC,CACA,MAAMhX,EAAQH,SAASmZ,EAAMC,OAAOC,QAAQ,SAAS5C,QAAQtW,OAG7D,GAFsB+U,SAASC,cAAc,WAE1BG,UAAU6B,SAAS,SAE/B,CACL,MAAMT,EAAe1W,SACnBmZ,EAAMC,OAAOC,QAAQ,SAAS5C,QAAQC,cAExCiD,EAAajD,EAAcvW,EAC7B,MANE8Y,EAAQ9Y,EAOZ,IAEJ,CAEA2Z,qBAAAA,CAAsBb,GACpB1G,MAAK,EAAe2G,iBAAiB,QAASD,EAChD,CAEAc,sBAAAA,CAAuBd,GACrB1G,MAAK,EAAiB2G,iBAAiB,QAASD,EAClD,CAEAe,iBAAAA,CAAkBf,GAChB1G,MAAK,EAAa2G,iBAAiB,UAAU,KAC3C,MAAMrF,EAAc,CAClBiD,KAAMvE,MAAK,EAAatW,MACxBiW,MAAOK,MAAK,EAActW,OAE5Bgd,EAAQpF,EAAY,GAExB,CAEAoG,qBAAAA,CAAsBhB,GACpB1G,MAAK,EAAS2G,iBAAiB,SAAUC,IACvC,GAAIA,EAAMC,OAAO9D,UAAU6B,SAAS,QAAS,CAC3C,MAAMhX,EAAQH,SAASmZ,EAAMC,OAAOC,QAAQ,YAAY5C,QAAQtW,OAEhE8Y,EAAQ9Y,EACV,IAEJ,CAEA+Z,iBAAAA,CAAkBjB,GAChB1G,MAAK,EAAS2G,iBAAiB,SAAUC,IACvC,GAAIA,EAAMC,OAAO9D,UAAU6B,SAAS,UAAW,CAC7C,MAAMhX,EAAQH,SAASmZ,EAAMC,OAAOC,QAAQ,YAAY5C,QAAQtW,OAEhE8Y,EAAQ9Y,EACV,IAEJ,GChhBU,ICAG,MACb,GACA,GACA,GAEA3I,WAAAA,GACE+a,MAAK,EAAe,KACpBA,MAAK,EAAkB,IAAIwB,GAC3BxB,MAAK,EAAQ,IAAI0C,GAEjB1C,MAAK,EAAMyG,kBAAkBzG,KAAK4H,oBAAoBC,KAAK7H,OAC3DA,MAAK,EAAMmH,eACTnH,KAAK8H,iBAAiBD,KAAK7H,MAC3BA,KAAK+H,sBAAsBF,KAAK7H,OAElCA,MAAK,EAAM+G,mBAAmB/G,KAAKgI,qBAAqBH,KAAK7H,OAC7DA,MAAK,EAAMiH,oBAAoBjH,KAAKiI,sBAAsBJ,KAAK7H,OAC/DA,MAAK,EAAMkH,eAAelH,KAAKkI,iBAAiBL,KAAK7H,OACrDA,MAAK,EAAMgH,mBAAmBhH,KAAKmI,qBAAqBN,KAAK7H,OAC7DA,MAAK,EAAMqH,sBAAsBrH,KAAKoI,wBAAwBP,KAAK7H,OACnEA,MAAK,EAAMsH,6BACTtH,KAAKqI,2BAA2BR,KAAK7H,MACrCA,KAAKsI,gCAAgCT,KAAK7H,OAE5CA,MAAK,EAAMuH,sBAAsBvH,KAAKuI,wBAAwBV,KAAK7H,OACnEA,MAAK,EAAMwH,uBAAuBxH,KAAKwI,yBAAyBX,KAAK7H,OACrEA,MAAK,EAAMyH,kBAAkBzH,KAAKyI,oBAAoBZ,KAAK7H,OAC3DA,MAAK,EAAM0H,sBAAsB1H,KAAK0I,wBAAwBb,KAAK7H,OACnEA,MAAK,EAAM2H,kBAAkB3H,KAAK2I,oBAAoBd,KAAK7H,MAC7D,CAEA4I,GAAAA,GAEE,GADA5I,MAAK,EAAMyB,OACkC,IAAzCzB,MAAK,EAAgBsC,SAAStX,OAEhC,IAAK,IAAImI,EAAI,EAAGA,EAAI6M,MAAK,EAAgBsC,SAAStX,OAAQmI,IAAK,CAC7D,MAAM0V,EAA0B7I,MAAK,EAAgBoC,WAAWjP,GAChE6M,MAAK,EAAMmC,cAAc0G,EAAwBlJ,MAAOxM,GACxD,IAAK,IAAI0S,EAAI,EAAGA,EAAIgD,EAAwB/H,MAAM9V,OAAQ6a,IACxD7F,MAAK,EAAMkB,iBAAiB2H,EAAwBxH,QAAQwE,GAAIA,EAEpE,MAGA7F,MAAK,EAAe,QACpBA,MAAK,EAAakB,iBAChB,WACA,0LACA,MACAzb,EAAUT,KAAKsT,MAAO,CAAErS,eAAgB,UAE1C+Z,MAAK,EAAakB,iBAChB,4BACA,iKACA,OACA,cAEFlB,MAAK,EAAakB,iBAChB,gBACA,yGACA,SACA,cAGJlB,MAAK,GAAgB,GACrBA,MAAK,EAAgBuC,aACvB,CAEA,GAAe5C,GACbK,MAAK,EAAeA,MAAK,EAAgBmC,cAAcxC,GACvDK,MAAK,EAAMmC,cAAcxC,EAAOK,MAAK,EAAgBsC,SAAStX,OAAS,EACzE,CAEA,GAAe4C,IACE,IAAXA,GACFoS,MAAK,EAAe,KACpBA,MAAK,EAAM0F,SAAS1F,MAAK,EAAgBsC,YAEzCtC,MAAK,EAAeA,MAAK,EAAgBoC,WAAWxU,GACpDoS,MAAK,EAAMoC,WAAWpC,MAAK,EAAcpS,GAE7C,CAEA,GAAUgT,EAAUiC,GAClBA,EAAYlD,MAAQiB,EAASjB,MAC7BkD,EAAYjD,KAAOgB,EAAS6D,YAC5B5B,EAAYhD,SAAWe,EAASf,SAChCgD,EAAY/C,QAAUc,EAASd,OACjC,CAEA,GAAawB,GACStB,MAAK,EAAgBoC,WAAWd,EAAYiD,MACpD5E,MAAQ2B,EAAY3B,KAClC,CAEAiI,mBAAAA,CAAoBha,GAClBoS,MAAK,EAAepS,EACtB,CAEAoa,oBAAAA,GACEhI,MAAK,EAAMoG,gBACXpG,MAAK,EAAMgG,gBACb,CAEAmC,oBAAAA,CAAqBhE,EAAcvW,GACZ,OAAjBuW,EACFnE,MAAK,EAAMmF,mBAAmBnF,MAAK,EAAaqB,QAAQzT,GAAQA,GAEhEoS,MAAK,EAAMoF,wBACTpF,MAAK,EAAgBoC,WAAW+B,GAAc9C,QAAQzT,GACtDuW,EACAvW,GAGJoS,MAAK,EAAMgG,gBACb,CAEAiC,qBAAAA,GACEjI,MAAK,EAAMkG,iBACb,CAEAqC,uBAAAA,GACEvI,MAAK,EAAMwG,mBACXxG,MAAK,EAAMsG,mBACb,CAEAkC,wBAAAA,GACExI,MAAK,EAAMuG,oBACb,CAEAkC,mBAAAA,CAAoBnH,GACO,KAArBA,EAAYiD,KACdvE,MAAK,EAAesB,EAAY3B,QAEhCK,MAAK,EAAasB,GAClBtB,MAAK,EAAM+F,YAAYzE,IAEzBtB,MAAK,EAAgBuC,aACvB,CAEAmG,uBAAAA,CAAwB9a,GACtBoS,MAAK,EAAMqF,sBACTrF,MAAK,EAAgBoC,WAAWxU,GAChCA,GAEFoS,MAAK,EAAMsG,mBACb,CAEAqC,mBAAAA,CAAoB/a,GAClB,MAAMkb,EAAiB9I,MAAK,EAAgBoC,WAAWxU,GACvDoS,MAAK,EAAgBqC,cAAczU,GAC/BoS,MAAK,IAAiB8I,GAAwC,OAAtB9I,MAAK,GAC/CA,MAAK,GAAgB,GAEvBA,MAAK,EAAMqC,cAAczU,GACzBoS,MAAK,EAAgBuC,aACvB,CAEA2F,gBAAAA,CAAiBtH,GACf,GAAsB,KAAlBA,EAAS2D,KAAa,CACxB,MAAMwE,EAAU/I,MAAK,EAAakB,iBAChCN,EAASjB,MACTiB,EAAS6D,YACT7D,EAASf,SACTe,EAASd,SAEXE,MAAK,EAAMkB,iBAAiB6H,EAAS/I,MAAK,EAAac,MAAM9V,OAAS,EACxE,MAAO,GAA8B,KAA1B4V,EAASuD,aAAqB,CACvC,MAAMtB,EAAc7C,MAAK,EAAaqB,QAAQT,EAAS2D,MACvDvE,MAAK,EAAUY,EAAUiC,GACzB7C,MAAK,EAAMqE,SAASzD,EACtB,KAAO,CACL,MAAMiC,EAAc7C,MAAK,EACtBoC,WAAWxB,EAASuD,cACpB9C,QAAQT,EAAS2D,MACpBvE,MAAK,EAAUY,EAAUiC,GACzB7C,MAAK,GAAgB,EACvB,CACAA,MAAK,EAAgBuC,aACvB,CAEAuF,gBAAAA,CAAiBla,GACfoS,MAAK,EAAamB,WAAWvT,GAC7BoS,MAAK,EAAgBuC,cACrBvC,MAAK,EAAMmB,WAAWvT,EACxB,CAEAwa,uBAAAA,CAAwBxa,GACtBoS,MAAK,EAAM0E,kBAAkB9W,EAC/B,CAEAya,0BAAAA,CAA2Bza,GACzBoS,MAAK,EAAaqB,QAAQzT,GAAOyS,kBACjCL,MAAK,EAAgBuC,cACrBvC,MAAK,EAAMgF,yBAAyBpX,EACtC,CAEAma,qBAAAA,CAAsB5D,EAAcvW,GAClCoS,MAAK,EAAgBoC,WAAW+B,GAAchD,WAAWvT,GACzDoS,MAAK,EAAgBuC,cACrBvC,MAAK,GAAgB,EACvB,CAEAsI,+BAAAA,CAAgCnE,EAAcvW,GAC5CoS,MAAK,EACFoC,WAAW+B,GACX9C,QAAQzT,GACRyS,kBACHL,MAAK,EAAgBuC,cACrBvC,MAAK,EAAMkF,8BAA8Bf,EAAcvW,EACzD,IDjNEgb,K","sources":["webpack://todo-list/./node_modules/date-fns/toDate.mjs","webpack://todo-list/./node_modules/date-fns/_lib/addLeadingZeros.mjs","webpack://todo-list/./node_modules/date-fns/formatISO.mjs","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildMatchFn.mjs","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","webpack://todo-list/./node_modules/date-fns/locale/en-US.mjs","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/localize.mjs","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/match.mjs","webpack://todo-list/./node_modules/date-fns/_lib/defaultOptions.mjs","webpack://todo-list/./node_modules/date-fns/constants.mjs","webpack://todo-list/./node_modules/date-fns/startOfDay.mjs","webpack://todo-list/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","webpack://todo-list/./node_modules/date-fns/constructFrom.mjs","webpack://todo-list/./node_modules/date-fns/getDayOfYear.mjs","webpack://todo-list/./node_modules/date-fns/differenceInCalendarDays.mjs","webpack://todo-list/./node_modules/date-fns/startOfYear.mjs","webpack://todo-list/./node_modules/date-fns/startOfWeek.mjs","webpack://todo-list/./node_modules/date-fns/startOfISOWeek.mjs","webpack://todo-list/./node_modules/date-fns/getISOWeekYear.mjs","webpack://todo-list/./node_modules/date-fns/getISOWeek.mjs","webpack://todo-list/./node_modules/date-fns/startOfISOWeekYear.mjs","webpack://todo-list/./node_modules/date-fns/getWeekYear.mjs","webpack://todo-list/./node_modules/date-fns/getWeek.mjs","webpack://todo-list/./node_modules/date-fns/startOfWeekYear.mjs","webpack://todo-list/./node_modules/date-fns/_lib/format/lightFormatters.mjs","webpack://todo-list/./node_modules/date-fns/_lib/format/formatters.mjs","webpack://todo-list/./node_modules/date-fns/_lib/format/longFormatters.mjs","webpack://todo-list/./node_modules/date-fns/_lib/protectedTokens.mjs","webpack://todo-list/./node_modules/date-fns/isValid.mjs","webpack://todo-list/./node_modules/date-fns/isDate.mjs","webpack://todo-list/./node_modules/date-fns/format.mjs","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/_lib/tzIntlTimeZoneName/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/_lib/tzTokenizeDate/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/_lib/newDateUTC/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/_lib/tzParseTimezone/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/format/formatters/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/_lib/tzPattern/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/toDate/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/format/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/formatInTimeZone/index.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/toZonedTime/index.js","webpack://todo-list/./src/js/task.js","webpack://todo-list/./node_modules/date-fns-tz/dist/esm/fromZonedTime/index.js","webpack://todo-list/./src/js/project.js","webpack://todo-list/./src/js/projectManager.js","webpack://todo-list/./src/js/view.js","webpack://todo-list/./src/js/index.js","webpack://todo-list/./src/js/controller.js"],"sourcesContent":["/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport function formatISO(date, options) {\n  const _date = toDate(date);\n\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n  let tzOffset = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(_date.getDate(), 2);\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\n    const year = addLeadingZeros(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = addLeadingZeros(_date.getHours(), 2);\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\n    const second = addLeadingZeros(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","/**\n * Returns the formatted time zone name of the provided `timeZone` or the current\n * system time zone if omitted, accounting for DST according to the UTC value of\n * the date.\n */\nexport function tzIntlTimeZoneName(length, date, options) {\n    const dtf = getDTF(length, options.timeZone, options.locale);\n    return 'formatToParts' in dtf ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date);\n}\nfunction partsTimeZone(dtf, date) {\n    const formatted = dtf.formatToParts(date);\n    for (let i = formatted.length - 1; i >= 0; --i) {\n        if (formatted[i].type === 'timeZoneName') {\n            return formatted[i].value;\n        }\n    }\n    return undefined;\n}\nfunction hackyTimeZone(dtf, date) {\n    const formatted = dtf.format(date).replace(/\\u200E/g, '');\n    const tzNameMatch = / [\\w-+ ]+$/.exec(formatted);\n    return tzNameMatch ? tzNameMatch[0].substr(1) : '';\n}\n// If a locale has been provided `en-US` is used as a fallback in case it is an\n// invalid locale, otherwise the locale is left undefined to use the system locale.\nfunction getDTF(length, timeZone, locale) {\n    return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {\n        timeZone: timeZone,\n        timeZoneName: length,\n    });\n}\n","/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport function tzTokenizeDate(date, timeZone) {\n    const dtf = getDateTimeFormat(timeZone);\n    return 'formatToParts' in dtf ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\nconst typeToPos = {\n    year: 0,\n    month: 1,\n    day: 2,\n    hour: 3,\n    minute: 4,\n    second: 5,\n};\nfunction partsOffset(dtf, date) {\n    try {\n        const formatted = dtf.formatToParts(date);\n        const filled = [];\n        for (let i = 0; i < formatted.length; i++) {\n            const pos = typeToPos[formatted[i].type];\n            if (pos !== undefined) {\n                filled[pos] = parseInt(formatted[i].value, 10);\n            }\n        }\n        return filled;\n    }\n    catch (error) {\n        if (error instanceof RangeError) {\n            return [NaN];\n        }\n        throw error;\n    }\n}\nfunction hackyOffset(dtf, date) {\n    const formatted = dtf.format(date);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\n    // const [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n    // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n    return [\n        parseInt(parsed[3], 10),\n        parseInt(parsed[1], 10),\n        parseInt(parsed[2], 10),\n        parseInt(parsed[4], 10),\n        parseInt(parsed[5], 10),\n        parseInt(parsed[6], 10),\n    ];\n}\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nconst dtfCache = {};\nfunction getDateTimeFormat(timeZone) {\n    if (!dtfCache[timeZone]) {\n        // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n        const testDateFormatted = new Intl.DateTimeFormat('en-US', {\n            hourCycle: 'h23',\n            timeZone: 'America/New_York',\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n        }).format(new Date('2014-06-25T04:00:00.123Z'));\n        const hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' ||\n            testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n        dtfCache[timeZone] = hourCycleSupported\n            ? new Intl.DateTimeFormat('en-US', {\n                hourCycle: 'h23',\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            })\n            : new Intl.DateTimeFormat('en-US', {\n                hour12: false,\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n    }\n    return dtfCache[timeZone];\n}\n","/**\n * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work\n * otherwise due to the nature of the\n * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.\n *\n * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.\n */\nexport function newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {\n    const utcDate = new Date(0);\n    utcDate.setUTCFullYear(fullYear, month, day);\n    utcDate.setUTCHours(hour, minute, second, millisecond);\n    return utcDate;\n}\n","import { tzTokenizeDate } from '../tzTokenizeDate/index.js';\nimport { newDateUTC } from '../newDateUTC/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst patterns = {\n    timezone: /([Z+-].*)$/,\n    timezoneZ: /^(Z)$/,\n    timezoneHH: /^([+-]\\d{2})$/,\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n};\n// Parse constious time zone offset formats to an offset in milliseconds\nexport function tzParseTimezone(timezoneString, date, isUtcDate) {\n    // Empty string\n    if (!timezoneString) {\n        return 0;\n    }\n    // Z\n    let token = patterns.timezoneZ.exec(timezoneString);\n    if (token) {\n        return 0;\n    }\n    let hours;\n    let absoluteOffset;\n    // ±hh\n    token = patterns.timezoneHH.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        if (!validateTimezone(hours)) {\n            return NaN;\n        }\n        return -(hours * MILLISECONDS_IN_HOUR);\n    }\n    // ±hh:mm or ±hhmm\n    token = patterns.timezoneHHMM.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[2], 10);\n        const minutes = parseInt(token[3], 10);\n        if (!validateTimezone(hours, minutes)) {\n            return NaN;\n        }\n        absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n        return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n    }\n    // IANA time zone\n    if (isValidTimezoneIANAString(timezoneString)) {\n        date = new Date(date || Date.now());\n        const utcDate = isUtcDate ? date : toUtcDate(date);\n        const offset = calcOffset(utcDate, timezoneString);\n        const fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n        return -fixedOffset;\n    }\n    return NaN;\n}\nfunction toUtcDate(date) {\n    return newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\nfunction calcOffset(date, timezoneString) {\n    const tokens = tzTokenizeDate(date, timezoneString);\n    // ms dropped because it's not provided by tzTokenizeDate\n    const asUTC = newDateUTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n    let asTS = date.getTime();\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return asUTC - asTS;\n}\nfunction fixOffset(date, offset, timezoneString) {\n    const localTS = date.getTime();\n    // Our UTC time is just a guess because our offset is just a guess\n    let utcGuess = localTS - offset;\n    // Test whether the zone matches the offset for this ts\n    const o2 = calcOffset(new Date(utcGuess), timezoneString);\n    // If so, offset didn't change, and we're done\n    if (offset === o2) {\n        return offset;\n    }\n    // If not, change the ts by the difference in the offset\n    utcGuess -= o2 - offset;\n    // If that gives us the local time we want, we're done\n    const o3 = calcOffset(new Date(utcGuess), timezoneString);\n    if (o2 === o3) {\n        return o2;\n    }\n    // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n    return Math.max(o2, o3);\n}\nfunction validateTimezone(hours, minutes) {\n    return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59));\n}\nconst validIANATimezoneCache = {};\nfunction isValidTimezoneIANAString(timeZoneString) {\n    if (validIANATimezoneCache[timeZoneString])\n        return true;\n    try {\n        new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString });\n        validIANATimezoneCache[timeZoneString] = true;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n","import { tzIntlTimeZoneName } from '../../_lib/tzIntlTimeZoneName/index.js';\nimport { tzParseTimezone } from '../../_lib/tzParseTimezone/index.js';\nconst MILLISECONDS_IN_MINUTE = 60 * 1000;\nexport const formatters = {\n    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n    X: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        if (timezoneOffset === 0) {\n            return 'Z';\n        }\n        switch (token) {\n            // Hours and optional minutes\n            case 'X':\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XX`\n            case 'XXXX':\n            case 'XX': // Hours and minutes without `:` delimeter\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XXX`\n            case 'XXXXX':\n            case 'XXX': // Hours and minutes with `:` delimeter\n            default:\n                return formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n    x: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        switch (token) {\n            // Hours and optional minutes\n            case 'x':\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xx`\n            case 'xxxx':\n            case 'xx': // Hours and minutes without `:` delimeter\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xxx`\n            case 'xxxxx':\n            case 'xxx': // Hours and minutes with `:` delimeter\n            default:\n                return formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (GMT)\n    O: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        switch (token) {\n            // Short\n            case 'O':\n            case 'OO':\n            case 'OOO':\n                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n            // Long\n            case 'OOOO':\n            default:\n                return 'GMT' + formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (specific non-location)\n    z: function (date, token, options) {\n        switch (token) {\n            // Short\n            case 'z':\n            case 'zz':\n            case 'zzz':\n                return tzIntlTimeZoneName('short', date, options);\n            // Long\n            case 'zzzz':\n            default:\n                return tzIntlTimeZoneName('long', date, options);\n        }\n    },\n};\nfunction getTimeZoneOffset(timeZone, originalDate) {\n    const timeZoneOffset = timeZone\n        ? tzParseTimezone(timeZone, originalDate, true) / MILLISECONDS_IN_MINUTE\n        : originalDate?.getTimezoneOffset() ?? 0;\n    if (Number.isNaN(timeZoneOffset)) {\n        throw new RangeError('Invalid time zone specified: ' + timeZone);\n    }\n    return timeZoneOffset;\n}\nfunction addLeadingZeros(number, targetLength) {\n    const sign = number < 0 ? '-' : '';\n    let output = Math.abs(number).toString();\n    while (output.length < targetLength) {\n        output = '0' + output;\n    }\n    return sign + output;\n}\nfunction formatTimezone(offset, delimiter = '') {\n    const sign = offset > 0 ? '-' : '+';\n    const absOffset = Math.abs(offset);\n    const hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n    const minutes = addLeadingZeros(Math.floor(absOffset % 60), 2);\n    return sign + hours + delimiter + minutes;\n}\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n    if (offset % 60 === 0) {\n        const sign = offset > 0 ? '-' : '+';\n        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n    }\n    return formatTimezone(offset, delimiter);\n}\nfunction formatTimezoneShort(offset, delimiter = '') {\n    const sign = offset > 0 ? '-' : '+';\n    const absOffset = Math.abs(offset);\n    const hours = Math.floor(absOffset / 60);\n    const minutes = absOffset % 60;\n    if (minutes === 0) {\n        return sign + String(hours);\n    }\n    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    utcDate.setUTCFullYear(date.getFullYear());\n    return +date - +utcDate;\n}\n","/** Regex to identify the presence of a time zone specifier in a date string */\nexport const tzPattern = /(Z|[+-]\\d{2}(?::?\\d{2})?| UTC| [a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?)$/;\n","import { getTimezoneOffsetInMilliseconds } from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { tzPattern } from '../_lib/tzPattern/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst DEFAULT_ADDITIONAL_DIGITS = 2;\nconst patterns = {\n    dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\n    datePattern: /^([0-9W+-]+)(.*)/,\n    plainTime: /:/,\n    // year tokens\n    YY: /^(\\d{2})$/,\n    YYY: [\n        /^([+-]\\d{2})$/, // 0 additional digits\n        /^([+-]\\d{3})$/, // 1 additional digit\n        /^([+-]\\d{4})$/, // 2 additional digits\n    ],\n    YYYY: /^(\\d{4})/,\n    YYYYY: [\n        /^([+-]\\d{4})/, // 0 additional digits\n        /^([+-]\\d{5})/, // 1 additional digit\n        /^([+-]\\d{6})/, // 2 additional digits\n    ],\n    // date tokens\n    MM: /^-(\\d{2})$/,\n    DDD: /^-?(\\d{3})$/,\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n    Www: /^-?W(\\d{2})$/,\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    // time zone tokens (to identify the presence of a tz)\n    timeZone: tzPattern,\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param argument the value to convert\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {string} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n *\n * @returns the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function toDate(argument, options = {}) {\n    if (arguments.length < 1) {\n        throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n    if (argument === null) {\n        return new Date(NaN);\n    }\n    const additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n        throw new RangeError('additionalDigits must be 0, 1 or 2');\n    }\n    // Clone the date\n    if (argument instanceof Date ||\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')) {\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n        return new Date(argument.getTime());\n    }\n    else if (typeof argument === 'number' ||\n        Object.prototype.toString.call(argument) === '[object Number]') {\n        return new Date(argument);\n    }\n    else if (!(Object.prototype.toString.call(argument) === '[object String]')) {\n        return new Date(NaN);\n    }\n    const dateStrings = splitDateString(argument);\n    const { year, restDateString } = parseYear(dateStrings.date, additionalDigits);\n    const date = parseDate(restDateString, year);\n    if (date === null || isNaN(date.getTime())) {\n        return new Date(NaN);\n    }\n    if (date) {\n        const timestamp = date.getTime();\n        let time = 0;\n        let offset;\n        if (dateStrings.time) {\n            time = parseTime(dateStrings.time);\n            if (time === null || isNaN(time)) {\n                return new Date(NaN);\n            }\n        }\n        if (dateStrings.timeZone || options.timeZone) {\n            offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time));\n            if (isNaN(offset)) {\n                return new Date(NaN);\n            }\n        }\n        else {\n            // get offset accurate to hour in time zones that change offset\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n        }\n        return new Date(timestamp + time + offset);\n    }\n    else {\n        return new Date(NaN);\n    }\n}\nfunction splitDateString(dateString) {\n    const dateStrings = {};\n    let parts = patterns.dateTimePattern.exec(dateString);\n    let timeString;\n    if (!parts) {\n        parts = patterns.datePattern.exec(dateString);\n        if (parts) {\n            dateStrings.date = parts[1];\n            timeString = parts[2];\n        }\n        else {\n            dateStrings.date = null;\n            timeString = dateString;\n        }\n    }\n    else {\n        dateStrings.date = parts[1];\n        timeString = parts[3];\n    }\n    if (timeString) {\n        const token = patterns.timeZone.exec(timeString);\n        if (token) {\n            dateStrings.time = timeString.replace(token[1], '');\n            dateStrings.timeZone = token[1].trim();\n        }\n        else {\n            dateStrings.time = timeString;\n        }\n    }\n    return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n    if (dateString) {\n        const patternYYY = patterns.YYY[additionalDigits];\n        const patternYYYYY = patterns.YYYYY[additionalDigits];\n        // YYYY or ±YYYYY\n        let token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n        if (token) {\n            const yearString = token[1];\n            return {\n                year: parseInt(yearString, 10),\n                restDateString: dateString.slice(yearString.length),\n            };\n        }\n        // YY or ±YYY\n        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n        if (token) {\n            const centuryString = token[1];\n            return {\n                year: parseInt(centuryString, 10) * 100,\n                restDateString: dateString.slice(centuryString.length),\n            };\n        }\n    }\n    // Invalid ISO-formatted year\n    return {\n        year: null,\n    };\n}\nfunction parseDate(dateString, year) {\n    // Invalid ISO-formatted year\n    if (year === null) {\n        return null;\n    }\n    let date;\n    let month;\n    let week;\n    // YYYY\n    if (!dateString || !dateString.length) {\n        date = new Date(0);\n        date.setUTCFullYear(year);\n        return date;\n    }\n    // YYYY-MM\n    let token = patterns.MM.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        if (!validateDate(year, month)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month);\n        return date;\n    }\n    // YYYY-DDD or YYYYDDD\n    token = patterns.DDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        const dayOfYear = parseInt(token[1], 10);\n        if (!validateDayOfYearDate(year, dayOfYear)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, 0, dayOfYear);\n        return date;\n    }\n    // yyyy-MM-dd or YYYYMMDD\n    token = patterns.MMDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        const day = parseInt(token[2], 10);\n        if (!validateDate(year, month, day)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month, day);\n        return date;\n    }\n    // YYYY-Www or YYYYWww\n    token = patterns.Www.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        if (!validateWeekDate(week)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week);\n    }\n    // YYYY-Www-D or YYYYWwwD\n    token = patterns.WwwD.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        const dayOfWeek = parseInt(token[2], 10) - 1;\n        if (!validateWeekDate(week, dayOfWeek)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week, dayOfWeek);\n    }\n    // Invalid ISO-formatted date\n    return null;\n}\nfunction parseTime(timeString) {\n    let hours;\n    let minutes;\n    // hh\n    let token = patterns.HH.exec(timeString);\n    if (token) {\n        hours = parseFloat(token[1].replace(',', '.'));\n        if (!validateTime(hours)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\n    }\n    // hh:mm or hhmm\n    token = patterns.HHMM.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseFloat(token[2].replace(',', '.'));\n        if (!validateTime(hours, minutes)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    }\n    // hh:mm:ss or hhmmss\n    token = patterns.HHMMSS.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseInt(token[2], 10);\n        const seconds = parseFloat(token[3].replace(',', '.'));\n        if (!validateTime(hours, minutes, seconds)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n    }\n    // Invalid ISO-formatted time\n    return null;\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n    week = week || 0;\n    day = day || 0;\n    const date = new Date(0);\n    date.setUTCFullYear(isoWeekYear, 0, 4);\n    const fourthOfJanuaryDay = date.getUTCDay() || 7;\n    const diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n    date.setUTCDate(date.getUTCDate() + diff);\n    return date;\n}\n// Validation functions\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\nfunction validateDate(year, month, date) {\n    if (month < 0 || month > 11) {\n        return false;\n    }\n    if (date != null) {\n        if (date < 1) {\n            return false;\n        }\n        const isLeapYear = isLeapYearIndex(year);\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n            return false;\n        }\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n    if (dayOfYear < 1) {\n        return false;\n    }\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear && dayOfYear > 366) {\n        return false;\n    }\n    if (!isLeapYear && dayOfYear > 365) {\n        return false;\n    }\n    return true;\n}\nfunction validateWeekDate(week, day) {\n    if (week < 0 || week > 52) {\n        return false;\n    }\n    if (day != null && (day < 0 || day > 6)) {\n        return false;\n    }\n    return true;\n}\nfunction validateTime(hours, minutes, seconds) {\n    if (hours < 0 || hours >= 25) {\n        return false;\n    }\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\n        return false;\n    }\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\n        return false;\n    }\n    return true;\n}\n","import { format as dateFnsFormat } from 'date-fns/format';\nimport { formatters } from './formatters/index.js';\nimport { toDate } from '../toDate/index.js';\nconst tzFormattingTokensRegExp = /([xXOz]+)|''|'(''|[^'])+('|$)/g;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may consty by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | PDT, EST, CEST                    | 6     |\n * |                                 | zzzz    | Pacific Daylight Time             | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are created using the Intl browser API. The output is determined by the\n *    preferred standard of the current locale (en-US by default) which may not always give the expected result.\n *    For this reason it is recommended to supply a `locale` in the format options when formatting a time zone name.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. These tokens are often confused with others. See: https://git.io/fxCyr\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole\n *   library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard\n *   #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). See [this\n *   post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param date the original date\n * @param formatStr the string of tokens\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\n *   https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\n *   [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @param {Date|Number} [options.originalDate] - can be used to pass the original unmodified date to `format` to\n *   improve correctness of the replaced timezone token close to the DST threshold.\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see:\n *   https://git.io/fxCyr\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options = {}) {\n    formatStr = String(formatStr);\n    const matches = formatStr.match(tzFormattingTokensRegExp);\n    if (matches) {\n        const d = toDate(options.originalDate || date, options);\n        // Work through each match and replace the tz token in the format string with the quoted\n        // formatted time zone so the remaining tokens can be filled in by date-fns#format.\n        formatStr = matches.reduce(function (result, token) {\n            if (token[0] === \"'\") {\n                return result; // This is a quoted portion, matched only to ensure we don't match inside it\n            }\n            const pos = result.indexOf(token);\n            const precededByQuotedSection = result[pos - 1] === \"'\";\n            const replaced = result.replace(token, \"'\" + formatters[token[0]](d, token, options) + \"'\");\n            // If the replacement results in two adjoining quoted strings, the back to back quotes\n            // are removed, so it doesn't look like an escaped quote.\n            return precededByQuotedSection\n                ? replaced.substring(0, pos - 1) + replaced.substring(pos + 1)\n                : replaced;\n        }, formatStr);\n    }\n    return dateFnsFormat(date, formatStr, options);\n}\n","import { format } from '../format/index.js';\nimport { toZonedTime } from '../toZonedTime/index.js';\n/**\n * @name formatInTimeZone\n * @category Time Zone Helpers\n * @summary Gets the offset in milliseconds between the time zone and Universal Coordinated Time (UTC)\n *\n * @param date the date representing the local time / real UTC time\n * @param timeZone the time zone this date should be formatted for; can be an offset or IANA time zone\n * @param formatStr the string of tokens\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\n *   https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\n *   [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n */\nexport function formatInTimeZone(date, timeZone, formatStr, options) {\n    options = {\n        ...options,\n        timeZone,\n        originalDate: date,\n    };\n    return format(toZonedTime(date, timeZone, { timeZone: options.timeZone }), formatStr, options);\n}\n","import { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { toDate } from '../toDate/index.js';\n/**\n * @name toZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param date the date with the relevant UTC time\n * @param timeZone the time zone to get local time for, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n *\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = toZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport function toZonedTime(date, timeZone, options) {\n    date = toDate(date, options);\n    const offsetMilliseconds = tzParseTimezone(timeZone, date, true);\n    const d = new Date(date.getTime() - offsetMilliseconds);\n    const resultDate = new Date(0);\n    resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n    resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n    return resultDate;\n}\n","import { formatInTimeZone, fromZonedTime } from 'date-fns-tz';\n\nconst priorities = ['low', 'medium', 'high'];\n\nexport default class Task {\n  #title;\n  #desc;\n  #priority;\n  #dueDate;\n  #completed;\n\n  constructor(title, desc, priority, dueDate, completed = false) {\n    this.title = title;\n    this.desc = desc;\n    this.priority = priority;\n    this.dueDate = dueDate;\n    this.#completed = completed;\n  }\n\n  get title() {\n    return this.#title;\n  }\n\n  set title(newTitle) {\n    this.#title = String(newTitle);\n  }\n\n  get desc() {\n    return this.#desc;\n  }\n\n  set desc(newDesc) {\n    this.#desc = String(newDesc);\n  }\n\n  get priority() {\n    return this.#priority;\n  }\n\n  set priority(priorityLevel) {\n    // Ensure the priority level is one of the available options\n    if (priorities.includes(String(priorityLevel).toLowerCase())) {\n      this.#priority = priorityLevel;\n    } else {\n      throw new Error('Invalid priority level');\n    }\n  }\n\n  get completed() {\n    return this.#completed;\n  }\n\n  toggleCompleted() {\n    this.#completed = !this.completed;\n  }\n\n  get dueDate() {\n    return this.#dueDate;\n  }\n\n  set dueDate(dueDate) {\n    // We want to store all dates in UTC so they can be converted to timezones\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    this.#dueDate = new Date(fromZonedTime(dueDate, timeZone));\n  }\n\n  getLocalDueDate() {\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return formatInTimeZone(this.dueDate, timeZone, 'MMM dd, yyyy');\n  }\n\n  toJSON() {\n    return {\n      title: this.#title,\n      desc: this.#desc,\n      priority: this.priority,\n      dueDate: this.dueDate,\n      completed: this.#completed,\n    };\n  }\n\n  static fromJSON(taskData) {\n    return new Task(\n      taskData.title,\n      taskData.desc,\n      taskData.priority,\n      taskData.dueDate,\n      taskData.completed,\n    );\n  }\n}\n","import { toDate } from '../toDate/index.js';\nimport { tzPattern } from '../_lib/tzPattern/index.js';\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { newDateUTC } from '../_lib/newDateUTC/index.js';\n/**\n * @name fromZonedTime\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param date the date with values representing the local time\n * @param timeZone the time zone of this local time, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = fromZonedTime(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nexport function fromZonedTime(date, timeZone, options) {\n    if (typeof date === 'string' && !date.match(tzPattern)) {\n        return toDate(date, { ...options, timeZone });\n    }\n    date = toDate(date, options);\n    const utc = newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()).getTime();\n    const offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc));\n    return new Date(utc + offsetMilliseconds);\n}\n","import Task from './task.js';\n\nexport default class Project {\n  #title;\n  #tasks;\n\n  constructor(title) {\n    this.title = title;\n    this.#tasks = [];\n  }\n\n  get title() {\n    return this.#title;\n  }\n\n  set title(newTitle) {\n    this.#title = String(newTitle);\n  }\n\n  get tasks() {\n    return this.#tasks;\n  }\n\n  addTask(task) {\n    if (task instanceof Task) {\n      this.#tasks.push(task);\n    } else {\n      throw new Error('Invalid task object');\n    }\n  }\n\n  createAndAddTask(title, desc, priority, dueDate) {\n    const task = new Task(title, desc, priority, dueDate);\n    this.addTask(task);\n    return task;\n  }\n\n  deleteTask(index) {\n    this.#tasks.splice(index, 1);\n  }\n\n  getTask(index) {\n    return this.#tasks[index];\n  }\n\n  toJSON() {\n    return {\n      title: this.#title,\n      tasks: this.#tasks.map((task) => task.toJSON()),\n    };\n  }\n\n  static fromJSON(projectData) {\n    const project = new Project(projectData.title);\n    project.#tasks = projectData.tasks.map((taskData) =>\n      Task.fromJSON(taskData),\n    );\n    return project;\n  }\n}\n","import Project from './project.js';\n\nexport default class ProjectManager {\n  #projects;\n\n  constructor() {\n    this.#projects = [];\n    this.init();\n  }\n\n  init() {\n    // Detect is localStorage is supported. Returns if not.\n    try {\n      const x = '__local_storage_test__';\n      localStorage.setItem(x, x);\n      localStorage.removeItem(x);\n    } catch (e) {\n      console.log(e);\n    }\n\n    if (localStorage.getItem('projects')) {\n      this.#populateProjects();\n    }\n  }\n\n  #populateProjects() {\n    const storedProjects = JSON.parse(localStorage.getItem('projects'));\n\n    this.#projects = storedProjects.map((projData) =>\n      Project.fromJSON(projData),\n    );\n  }\n\n  createProject(title) {\n    const project = new Project(title);\n    this.#projects.push(project);\n\n    return project;\n  }\n\n  getProject(index) {\n    return this.#projects[index];\n  }\n\n  deleteProject(index) {\n    this.#projects.splice(index, 1);\n  }\n\n  get projects() {\n    return this.#projects;\n  }\n\n  saveToLocal() {\n    localStorage.setItem(\n      'projects',\n      JSON.stringify(this.#projects.map((proj) => proj.toJSON())),\n    );\n  }\n}\n","import { formatISO } from 'date-fns';\nimport { formatInTimeZone } from 'date-fns-tz';\n\nexport default class View {\n  #sidebar;\n  #tasks;\n  #addTaskBtn;\n  #taskDialog;\n  #closeTaskBtn;\n  #taskForm;\n  #taskTitle;\n  #taskDesc;\n  #taskPriority;\n  #taskDate;\n  #taskMode;\n  #timeZone;\n  #addProjectBtn;\n  #projectDialog;\n  #projectForm;\n  #projectTitle;\n  #closeProjectBtn;\n  #projectMode;\n  #projectName;\n  #projectIndex;\n\n  constructor() {\n    this.#sidebar = document.querySelector('.sidebar');\n    this.#tasks = document.querySelector('.tasks');\n    this.#addTaskBtn = document.querySelector('.add-task');\n    this.#closeTaskBtn = document.querySelector('.task-cancel');\n    this.#taskDialog = document.querySelector('.task-dialog');\n    this.#taskForm = document.querySelector('.task-form');\n    this.#taskTitle = document.querySelector('#task-title');\n    this.#taskDesc = document.querySelector('#task-desc');\n    this.#taskPriority = document.querySelector('#task-priority');\n    this.#taskDate = document.querySelector('#task-date');\n    this.#taskMode = document.querySelector('#task-mode');\n    this.#timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    this.#addProjectBtn = document.querySelector('.add-project');\n    this.#projectDialog = document.querySelector('.project-dialog');\n    this.#projectForm = document.querySelector('.project-form');\n    this.#projectTitle = document.querySelector('#project-title');\n    this.#closeProjectBtn = document.querySelector('.project-cancel');\n    this.#projectMode = document.querySelector('#project-mode');\n    this.#projectName = document.querySelector('.project-name');\n    this.#projectIndex = document.querySelector('#project-index');\n  }\n\n  // Task element functions\n  #createTask(task) {\n    const taskElement = document.createElement('div');\n    taskElement.classList.add('task');\n\n    const taskMinimized = this.#createTaskMinimized(task);\n    const taskDetails = this.#createTaskDetails(task);\n\n    taskElement.appendChild(taskMinimized);\n    taskElement.appendChild(taskDetails);\n\n    return taskElement;\n  }\n\n  init() {\n    document.querySelector('.header-date').textContent = this.#formatDateString(\n      Date.now(),\n    );\n\n    this.#taskDate.setAttribute(\n      'min',\n      formatISO(Date.now(), { representation: 'date' }),\n    );\n  }\n\n  #createTaskMinimized(task) {\n    const taskMinimized = document.createElement('div');\n    taskMinimized.classList.add('task-min');\n\n    const checkBtn = document.createElement('button');\n    checkBtn.classList.add(\n      'clickable-btn',\n      `${task.completed ? 'checked' : 'unchecked'}`,\n    );\n\n    const taskTitle = document.createElement('span');\n    taskTitle.classList.add('title');\n    taskTitle.textContent = task.title;\n\n    const taskLeft = document.createElement('div');\n    taskLeft.classList.add('task-left');\n\n    taskLeft.appendChild(checkBtn);\n    taskLeft.appendChild(taskTitle);\n\n    const taskRight = document.createElement('div');\n    taskRight.classList.add('task-right');\n\n    const taskDateEle = document.createElement('span');\n    taskDateEle.classList.add('date');\n    taskDateEle.textContent = this.#formatDateString(task.dueDate);\n\n    const editBtn = document.createElement('button');\n    editBtn.classList.add('clickable-btn', 'edit');\n\n    const deleteBtn = document.createElement('button');\n    deleteBtn.classList.add('clickable-btn', 'delete');\n\n    const detailsBtn = document.createElement('button');\n    detailsBtn.classList.add('clickable-btn', 'drop-down');\n\n    taskRight.appendChild(taskDateEle);\n    taskRight.appendChild(editBtn);\n    taskRight.appendChild(deleteBtn);\n    taskRight.appendChild(detailsBtn);\n\n    taskMinimized.appendChild(taskLeft);\n    taskMinimized.appendChild(taskRight);\n\n    return taskMinimized;\n  }\n\n  #createTaskDetails(task) {\n    const taskDetails = document.createElement('div');\n    taskDetails.classList.add('task-details');\n\n    const taskDescription = document.createElement('p');\n    taskDescription.textContent = task.desc;\n\n    const taskPriority = document.createElement('div');\n    taskPriority.textContent = task.priority;\n    taskPriority.classList.add(`${task.priority}`, 'priority');\n\n    taskDetails.appendChild(taskDescription);\n    taskDetails.appendChild(taskPriority);\n\n    return taskDetails;\n  }\n\n  #updateTasksIndices() {\n    const tasks = this.#tasks.querySelectorAll('.task');\n\n    let i = 0;\n    tasks.forEach((task) => {\n      task.dataset.index = i;\n      i++;\n    });\n  }\n\n  #updateProjectIndices() {\n    const tasks = this.#sidebar.querySelectorAll('.project:not(.today)');\n\n    let i = 0;\n    tasks.forEach((task) => {\n      task.dataset.index = i;\n      i++;\n    });\n  }\n\n  #formatDateString(date) {\n    return formatInTimeZone(date, this.#timeZone, 'MMM dd, yyyy');\n  }\n\n  createAndAddTask(task, index) {\n    const taskElement = this.#createTask(task);\n\n    taskElement.dataset.index = index;\n    this.#tasks.appendChild(taskElement);\n  }\n\n  #createAndAddTodayTasks(task, projectIndex, index) {\n    const taskElement = this.#createTask(task);\n\n    taskElement.dataset.projectIndex = projectIndex;\n    taskElement.dataset.index = index;\n    this.#tasks.appendChild(taskElement);\n  }\n\n  deleteTask(index) {\n    const task = this.#tasks.querySelector(`.task[data-index=\"${index}\"]`);\n    this.#tasks.removeChild(task);\n    this.#updateTasksIndices();\n  }\n\n  editTask(task) {\n    const taskEle = this.#tasks.querySelector(\n      `.task[data-index=\"${task.mode}\"]`,\n    );\n    const taskTitle = taskEle.querySelector('.title');\n    const taskDate = taskEle.querySelector('.date');\n    const taskDescription = taskEle.querySelector('p');\n    const taskPriority = taskEle.querySelector('.priority');\n\n    taskTitle.textContent = task.title;\n    taskDate.textContent = this.#formatDateString(task.dueDate);\n    taskDescription.textContent = task.description;\n    taskPriority.classList = `priority ${task.priority}`;\n    taskPriority.textContent = task.priority;\n  }\n\n  toggleTaskDetails(index) {\n    const taskEle = this.#tasks.querySelector(`.task[data-index=\"${index}\"]`);\n    const taskDetailsBtn =\n      taskEle.querySelector('.drop-down') === null\n        ? taskEle.querySelector('.drop-up')\n        : taskEle.querySelector('.drop-down');\n    const taskDetails = taskEle.querySelector('.task-details');\n\n    if (taskDetailsBtn.classList.contains('drop-down')) {\n      taskDetailsBtn.classList.remove('drop-down');\n      taskDetailsBtn.classList.add('drop-up');\n      taskDetails.style.display = 'flex';\n    } else {\n      taskDetailsBtn.classList.remove('drop-up');\n      taskDetailsBtn.classList.add('drop-down');\n      taskDetails.style.display = 'none';\n    }\n  }\n\n  toggleTaskCompleteMarker(index) {\n    const taskEle = this.#tasks.querySelector(`.task[data-index=\"${index}\"]`);\n    const taskCompleteMarker =\n      taskEle.querySelector('.unchecked') === null\n        ? taskEle.querySelector('.checked')\n        : taskEle.querySelector('.unchecked');\n\n    if (taskCompleteMarker.classList.contains('unchecked')) {\n      taskCompleteMarker.classList.remove('unchecked');\n      taskCompleteMarker.classList.add('checked');\n    } else {\n      taskCompleteMarker.classList.remove('checked');\n      taskCompleteMarker.classList.add('unchecked');\n    }\n  }\n\n  toggleTaskCompleteMarkerToday(projectIndex, index) {\n    const taskEle = this.#tasks.querySelector(\n      `.task[data-project-index=\"${projectIndex}\"][data-index=\"${index}\"]`,\n    );\n    const taskCompleteMarker =\n      taskEle.querySelector('.unchecked') === null\n        ? taskEle.querySelector('.checked')\n        : taskEle.querySelector('.unchecked');\n\n    if (taskCompleteMarker.classList.contains('unchecked')) {\n      taskCompleteMarker.classList.remove('unchecked');\n      taskCompleteMarker.classList.add('checked');\n    } else {\n      taskCompleteMarker.classList.remove('checked');\n      taskCompleteMarker.classList.add('unchecked');\n    }\n  }\n\n  populateTaskDialog(task, index) {\n    this.#taskMode.value = String(index);\n    this.#taskTitle.value = task.title;\n    this.#taskDesc.value = task.desc;\n    this.#taskPriority.value = task.priority;\n    this.#taskDate.value = formatISO(task.dueDate, { representation: 'date' });\n    this.#projectIndex.value = '';\n  }\n\n  populateTodayTaskDialog(task, projectIndex, index) {\n    this.populateTaskDialog(task, index);\n    this.#projectIndex.value = String(projectIndex);\n  }\n\n  populateProjectDialog(project, index) {\n    this.#projectMode.value = String(index);\n    this.#projectTitle.value = project.title;\n  }\n\n  // Project element functions\n  createProject(title, index) {\n    const projectEle = document.createElement('li');\n    projectEle.classList.add('project');\n    projectEle.dataset.index = index;\n\n    const projectBtn = document.createElement('button');\n    projectBtn.type = 'button';\n    projectBtn.classList.add('project-btn');\n\n    const projectTitle = document.createElement('span');\n    projectTitle.textContent = title;\n\n    const projectControls = document.createElement('div');\n    projectControls.classList.add('project-controls');\n\n    const editBtn = document.createElement('button');\n    editBtn.classList.add('clickable-btn', 'edit');\n\n    const deleteBtn = document.createElement('button');\n    deleteBtn.classList.add('clickable-btn', 'delete');\n\n    projectControls.appendChild(editBtn);\n    projectControls.appendChild(deleteBtn);\n\n    projectBtn.appendChild(projectTitle);\n    projectBtn.appendChild(projectControls);\n    projectEle.appendChild(projectBtn);\n    document.querySelector('.sidebar > ul').appendChild(projectEle);\n  }\n\n  getToday(projects) {\n    this.#tasks.replaceChildren();\n\n    const currDate = formatISO(Date.now(), { representation: 'date' });\n    for (let i = 0; i < projects.length; i++) {\n      for (let j = 0; j < projects[i].tasks.length; j++) {\n        if (\n          formatISO(projects[i].getTask(j).dueDate, {\n            representation: 'date',\n          }) == currDate\n        ) {\n          this.#createAndAddTodayTasks(projects[i].getTask(j), i, j);\n        }\n      }\n    }\n    this.#projectName.textContent = 'Today';\n    this.#addTaskBtn.classList.add('hide-task-btn');\n\n    const activeProject = document.querySelector('.active');\n    if (activeProject !== null) {\n      activeProject.classList.remove('active');\n    }\n    const projectTab = document.querySelector(`.project[data-index=\"-1\"]`);\n    projectTab.classList.add('active');\n  }\n\n  getProject(project, index) {\n    this.#tasks.replaceChildren();\n    for (let i = 0; i < project.tasks.length; i++) {\n      this.createAndAddTask(project.tasks[i], i);\n    }\n    this.#projectName.textContent = project.title;\n    this.#addTaskBtn.classList.remove('hide-task-btn');\n\n    const activeProject = document.querySelector('.active');\n    if (activeProject !== null) {\n      activeProject.classList.remove('active');\n    }\n    const projectTab = document.querySelector(\n      `.project[data-index=\"${index}\"]`,\n    );\n    projectTab.classList.add('active');\n  }\n\n  editProject(project) {\n    const projectEle = this.#sidebar.querySelector(\n      `.project[data-index=\"${project.mode}\"]`,\n    );\n    const projectTitle = projectEle.querySelector('.project-btn');\n    projectTitle.textContent = project.title;\n\n    if (projectEle.classList.contains('active')) {\n      this.#projectName.textContent = project.title;\n    }\n  }\n\n  deleteProject(index) {\n    const projectEle = this.#sidebar.querySelector(\n      `.project[data-index=\"${index}\"]`,\n    );\n    projectEle.remove();\n    this.#updateProjectIndices();\n  }\n\n  showTaskDialog() {\n    const activeProject = document.querySelector('.active');\n    if (activeProject !== null) {\n      if (this.#taskDate.value === '') {\n        this.#taskDate.value = formatISO(Date.now(), {\n          representation: 'date',\n        });\n      }\n      this.#taskDialog.showModal();\n    }\n  }\n\n  closeTaskDialog() {\n    this.#taskDialog.close();\n  }\n\n  clearTaskForm() {\n    this.#taskForm.reset();\n  }\n\n  showProjectDialog() {\n    this.#projectDialog.showModal();\n  }\n\n  closeProjectDialog() {\n    this.#projectDialog.close();\n  }\n\n  clearProjectForm() {\n    this.#projectForm.reset();\n  }\n\n  // Binders for events to handlers in controller\n  bindSelectProject(handler) {\n    this.#sidebar.addEventListener('click', (event) => {\n      if (event.target.classList.contains('project-btn')) {\n        const index = parseInt(event.target.closest('.project').dataset.index);\n\n        handler(index);\n      }\n    });\n  }\n\n  bindOpenTaskDialog(handler) {\n    this.#addTaskBtn.addEventListener('click', handler);\n  }\n\n  bindEditTaskDialog(handler) {\n    this.#tasks.addEventListener('click', (event) => {\n      if (event.target.classList.contains('edit')) {\n        const taskEle = event.target.closest('.task');\n        const index = parseInt(taskEle.dataset.index);\n        const projectIndex = taskEle.dataset.projectIndex\n          ? parseInt(taskEle.dataset.projectIndex)\n          : null;\n\n        handler(projectIndex, index);\n      }\n    });\n  }\n\n  bindCloseTaskDialog(handler) {\n    this.#closeTaskBtn.addEventListener('click', handler);\n  }\n\n  bindTaskSubmit(handler) {\n    this.#taskForm.addEventListener('submit', () => {\n      const taskData = {\n        mode: this.#taskMode.value,\n        title: this.#taskTitle.value,\n        description: this.#taskDesc.value,\n        priority: this.#taskPriority.value,\n        dueDate: this.#taskDate.value,\n        projectIndex: this.#projectIndex.value,\n      };\n\n      handler(taskData);\n    });\n  }\n\n  bindDeleteTask(handler, todayHandler) {\n    this.#tasks.addEventListener('click', (event) => {\n      if (event.target.classList.contains('delete')) {\n        const index = parseInt(event.target.closest('.task').dataset.index);\n        const activeProject = document.querySelector('.active');\n\n        if (!activeProject.classList.contains('today')) {\n          handler(index);\n        } else {\n          const projectIndex = parseInt(\n            event.target.closest('.task').dataset.projectIndex,\n          );\n          todayHandler(projectIndex, index);\n        }\n      }\n    });\n  }\n\n  bindToggleTaskDetails(handler) {\n    this.#tasks.addEventListener('click', (event) => {\n      if (\n        event.target.classList.contains('drop-down') ||\n        event.target.classList.contains('drop-up')\n      ) {\n        const index = parseInt(event.target.closest('.task').dataset.index);\n\n        handler(index);\n      }\n    });\n  }\n\n  bindToggleTaskCompleteMarker(handler, todayHandler) {\n    this.#tasks.addEventListener('click', (event) => {\n      if (\n        event.target.classList.contains('unchecked') ||\n        event.target.classList.contains('checked')\n      ) {\n        const index = parseInt(event.target.closest('.task').dataset.index);\n        const activeProject = document.querySelector('.active');\n\n        if (!activeProject.classList.contains('today')) {\n          handler(index);\n        } else {\n          const projectIndex = parseInt(\n            event.target.closest('.task').dataset.projectIndex,\n          );\n          todayHandler(projectIndex, index);\n        }\n      }\n    });\n  }\n\n  bindOpenProjectDialog(handler) {\n    this.#addProjectBtn.addEventListener('click', handler);\n  }\n\n  bindCloseProjectDialog(handler) {\n    this.#closeProjectBtn.addEventListener('click', handler);\n  }\n\n  bindProjectSubmit(handler) {\n    this.#projectForm.addEventListener('submit', () => {\n      const projectData = {\n        mode: this.#projectMode.value,\n        title: this.#projectTitle.value,\n      };\n      handler(projectData);\n    });\n  }\n\n  bindEditProjectDialog(handler) {\n    this.#sidebar.addEventListener('click', (event) => {\n      if (event.target.classList.contains('edit')) {\n        const index = parseInt(event.target.closest('.project').dataset.index);\n\n        handler(index);\n      }\n    });\n  }\n\n  bindDeleteProject(handler) {\n    this.#sidebar.addEventListener('click', (event) => {\n      if (event.target.classList.contains('delete')) {\n        const index = parseInt(event.target.closest('.project').dataset.index);\n\n        handler(index);\n      }\n    });\n  }\n}\n","import 'normalize.css';\nimport '../css/styles.css';\n\nimport Controller from './controller';\n\nconst app = new Controller();\napp.run();\n","import { formatISO } from 'date-fns';\n\nimport ProjectManager from './projectManager';\nimport View from './view';\n\nexport default class Controller {\n  #currProject;\n  #projectManager;\n  #view;\n\n  constructor() {\n    this.#currProject = null;\n    this.#projectManager = new ProjectManager();\n    this.#view = new View();\n\n    this.#view.bindSelectProject(this.handleSelectProject.bind(this));\n    this.#view.bindDeleteTask(\n      this.handleDeleteTask.bind(this),\n      this.handleDeleteTodayTask.bind(this),\n    );\n    this.#view.bindOpenTaskDialog(this.handleOpenTaskDialog.bind(this));\n    this.#view.bindCloseTaskDialog(this.handleCloseTaskDialog.bind(this));\n    this.#view.bindTaskSubmit(this.handleTaskSubmit.bind(this));\n    this.#view.bindEditTaskDialog(this.handleEditTaskDialog.bind(this));\n    this.#view.bindToggleTaskDetails(this.handleToggleTaskDetails.bind(this));\n    this.#view.bindToggleTaskCompleteMarker(\n      this.handleToggleCompleteMarker.bind(this),\n      this.handleToggleCompleteMarkerToday.bind(this),\n    );\n    this.#view.bindOpenProjectDialog(this.handleOpenProjectDialog.bind(this));\n    this.#view.bindCloseProjectDialog(this.handleCloseProjectDialog.bind(this));\n    this.#view.bindProjectSubmit(this.handleProjectSubmit.bind(this));\n    this.#view.bindEditProjectDialog(this.handleEditProjectDialog.bind(this));\n    this.#view.bindDeleteProject(this.handleDeleteProject.bind(this));\n  }\n\n  run() {\n    this.#view.init();\n    if (this.#projectManager.projects.length !== 0) {\n      // Returning user, load their data\n      for (let i = 0; i < this.#projectManager.projects.length; i++) {\n        const currentlyLoadingProject = this.#projectManager.getProject(i);\n        this.#view.createProject(currentlyLoadingProject.title, i);\n        for (let j = 0; j < currentlyLoadingProject.tasks.length; j++) {\n          this.#view.createAndAddTask(currentlyLoadingProject.getTask(j), j);\n        }\n      }\n    } else {\n      // First time user -- yay!\n      this.#createProject('TODO');\n      this.#currProject.createAndAddTask(\n        'Welcome!',\n        'To get started try selecting the default todo list provided on the left. Once selected a button will appear on the page that you can use to create your own custom tasks for that list!',\n        'low',\n        formatISO(Date.now(), { representation: 'date' }),\n      );\n      this.#currProject.createAndAddTask(\n        'Complete your first task!',\n        \"Once you've finished your first task you can click the checkbox next to a task to mark it as complete. A completed task will not be deleted unless you opt to.\",\n        'high',\n        '2030-01-01',\n      );\n      this.#currProject.createAndAddTask(\n        'Editing tasks',\n        \"Made a spelling error? Try clicking the pencil icon, if everyone was perfect we wouldn't need erasers.\",\n        'medium',\n        '2030-01-01',\n      );\n    }\n    this.#selectProject(-1);\n    this.#projectManager.saveToLocal();\n  }\n\n  #createProject(title) {\n    this.#currProject = this.#projectManager.createProject(title);\n    this.#view.createProject(title, this.#projectManager.projects.length - 1);\n  }\n\n  #selectProject(index) {\n    if (index === -1) {\n      this.#currProject = null;\n      this.#view.getToday(this.#projectManager.projects);\n    } else {\n      this.#currProject = this.#projectManager.getProject(index);\n      this.#view.getProject(this.#currProject, index);\n    }\n  }\n\n  #editTask(taskData, taskElement) {\n    taskElement.title = taskData.title;\n    taskElement.desc = taskData.description;\n    taskElement.priority = taskData.priority;\n    taskElement.dueDate = taskData.dueDate;\n  }\n\n  #editProject(projectData) {\n    const editProject = this.#projectManager.getProject(projectData.mode);\n    editProject.title = projectData.title;\n  }\n\n  handleSelectProject(index) {\n    this.#selectProject(index);\n  }\n\n  handleOpenTaskDialog() {\n    this.#view.clearTaskForm();\n    this.#view.showTaskDialog();\n  }\n\n  handleEditTaskDialog(projectIndex, index) {\n    if (projectIndex === null) {\n      this.#view.populateTaskDialog(this.#currProject.getTask(index), index);\n    } else {\n      this.#view.populateTodayTaskDialog(\n        this.#projectManager.getProject(projectIndex).getTask(index),\n        projectIndex,\n        index,\n      );\n    }\n    this.#view.showTaskDialog();\n  }\n\n  handleCloseTaskDialog() {\n    this.#view.closeTaskDialog();\n  }\n\n  handleOpenProjectDialog() {\n    this.#view.clearProjectForm();\n    this.#view.showProjectDialog();\n  }\n\n  handleCloseProjectDialog() {\n    this.#view.closeProjectDialog();\n  }\n\n  handleProjectSubmit(projectData) {\n    if (projectData.mode === '') {\n      this.#createProject(projectData.title);\n    } else {\n      this.#editProject(projectData);\n      this.#view.editProject(projectData);\n    }\n    this.#projectManager.saveToLocal();\n  }\n\n  handleEditProjectDialog(index) {\n    this.#view.populateProjectDialog(\n      this.#projectManager.getProject(index),\n      index,\n    );\n    this.#view.showProjectDialog();\n  }\n\n  handleDeleteProject(index) {\n    const deletedProject = this.#projectManager.getProject(index);\n    this.#projectManager.deleteProject(index);\n    if (this.#currProject === deletedProject || this.#currProject === null) {\n      this.#selectProject(-1);\n    }\n    this.#view.deleteProject(index);\n    this.#projectManager.saveToLocal();\n  }\n\n  handleTaskSubmit(taskData) {\n    if (taskData.mode === '') {\n      const newTask = this.#currProject.createAndAddTask(\n        taskData.title,\n        taskData.description,\n        taskData.priority,\n        taskData.dueDate,\n      );\n      this.#view.createAndAddTask(newTask, this.#currProject.tasks.length - 1);\n    } else if (taskData.projectIndex === '') {\n      const taskElement = this.#currProject.getTask(taskData.mode);\n      this.#editTask(taskData, taskElement);\n      this.#view.editTask(taskData);\n    } else {\n      const taskElement = this.#projectManager\n        .getProject(taskData.projectIndex)\n        .getTask(taskData.mode);\n      this.#editTask(taskData, taskElement);\n      this.#selectProject(-1);\n    }\n    this.#projectManager.saveToLocal();\n  }\n\n  handleDeleteTask(index) {\n    this.#currProject.deleteTask(index);\n    this.#projectManager.saveToLocal();\n    this.#view.deleteTask(index);\n  }\n\n  handleToggleTaskDetails(index) {\n    this.#view.toggleTaskDetails(index);\n  }\n\n  handleToggleCompleteMarker(index) {\n    this.#currProject.getTask(index).toggleCompleted();\n    this.#projectManager.saveToLocal();\n    this.#view.toggleTaskCompleteMarker(index);\n  }\n\n  handleDeleteTodayTask(projectIndex, index) {\n    this.#projectManager.getProject(projectIndex).deleteTask(index);\n    this.#projectManager.saveToLocal();\n    this.#selectProject(-1);\n  }\n\n  handleToggleCompleteMarkerToday(projectIndex, index) {\n    this.#projectManager\n      .getProject(projectIndex)\n      .getTask(index)\n      .toggleCompleted();\n    this.#projectManager.saveToLocal();\n    this.#view.toggleTaskCompleteMarkerToday(projectIndex, index);\n  }\n}\n"],"names":["toDate","argument","argStr","Object","prototype","toString","call","Date","constructor","NaN","addLeadingZeros","number","targetLength","Math","abs","padStart","formatISO","date","options","_date","isNaN","getTime","RangeError","format","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","getFullYear","offset","getTimezoneOffset","absoluteOffset","trunc","getHours","getMinutes","getSeconds","join","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","width","String","defaultWidth","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","value","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","length","test","findIndex","object","hasOwnProperty","findKey","valueCallback","rest","slice","enUS","code","formatDistance","token","count","tokenValue","replace","addSuffix","comparison","formatRelative","_baseDate","_options","localize","ordinalNumber","dirtyNumber","Number","rem100","era","narrow","abbreviated","wide","quarter","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","weekStartsOn","firstWeekContainsDate","defaultOptions","getDefaultOptions","pow","millisecondsInWeek","millisecondsInDay","startOfDay","setHours","getTimezoneOffsetInMilliseconds","utcDate","UTC","getMilliseconds","setUTCFullYear","constructFrom","getDayOfYear","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","differenceInCalendarDays","cleanDate","setFullYear","startOfYear","startOfWeek","locale","getDay","diff","setDate","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getISOWeek","fourthOfJanuary","startOfISOWeekYear","getWeekYear","firstWeekOfNextYear","firstWeekOfThisYear","getWeek","firstWeek","startOfWeekYear","lightFormatters","y","signedYear","M","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","formatters","G","unit","Y","signedWeekYear","weekYear","R","u","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","delimiter","sign","absOffset","minutes","dateLongFormatter","pattern","timeLongFormatter","longFormatters","p","P","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isValid","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","cleanEscapedString","input","matched","tzIntlTimeZoneName","dtf","timeZone","Intl","DateTimeFormat","undefined","timeZoneName","getDTF","formatted","formatToParts","type","partsTimeZone","tzNameMatch","exec","substr","hackyTimeZone","typeToPos","hour","minute","second","dtfCache","newDateUTC","fullYear","millisecond","setUTCHours","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","patterns","timezone","timezoneZ","timezoneHH","timezoneHHMM","timezoneString","isUtcDate","validateTimezone","timeZoneString","validIANATimezoneCache","error","isValidTimezoneIANAString","now","toUtcDate","calcOffset","fixedOffset","utcGuess","o2","o3","max","fixOffset","tokens","testDateFormatted","hourCycle","hourCycleSupported","hour12","getDateTimeFormat","filled","pos","partsOffset","parsed","hackyOffset","tzTokenizeDate","asUTC","asTS","over","getTimeZoneOffset","floor","originalDate","timeZoneOffset","output","tzPattern","DEFAULT_ADDITIONAL_DIGITS","dateTimePattern","plainTime","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","arguments","TypeError","additionalDigits","dateStrings","dateString","timeString","parts","trim","splitDateString","restDateString","patternYYY","patternYYYYY","yearString","centuryString","parseYear","validateDate","isLeapYear","isLeapYearIndex","validateDayOfYearDate","validateWeekDate","dayOfISOWeekYear","parseDate","timestamp","parseFloat","validateTime","seconds","parseTime","isoWeekYear","getUTCDay","setUTCDate","getUTCDate","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","tzFormattingTokensRegExp","formatInTimeZone","formatStr","matches","reduce","indexOf","precededByQuotedSection","replaced","substring","map","firstCharacter","longFormatter","isToken","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","_message","subject","message","console","warn","includes","warnOrThrowProtectedError","formatter","offsetMilliseconds","resultDate","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toZonedTime","priorities","Task","title","desc","priority","dueDate","completed","this","newTitle","newDesc","priorityLevel","Error","toggleCompleted","resolvedOptions","utc","fromZonedTime","getLocalDueDate","toJSON","fromJSON","taskData","Project","tasks","addTask","task","push","createAndAddTask","deleteTask","splice","getTask","projectData","project","ProjectManager","init","localStorage","setItem","removeItem","log","getItem","storedProjects","JSON","parse","projData","createProject","getProject","deleteProject","projects","saveToLocal","stringify","proj","View","document","querySelector","taskElement","createElement","classList","add","taskMinimized","taskDetails","appendChild","textContent","setAttribute","checkBtn","taskTitle","taskLeft","taskRight","taskDateEle","editBtn","deleteBtn","detailsBtn","taskDescription","taskPriority","querySelectorAll","forEach","dataset","projectIndex","removeChild","editTask","taskEle","mode","taskDate","description","toggleTaskDetails","taskDetailsBtn","contains","remove","style","display","toggleTaskCompleteMarker","taskCompleteMarker","toggleTaskCompleteMarkerToday","populateTaskDialog","populateTodayTaskDialog","populateProjectDialog","projectEle","projectBtn","projectTitle","projectControls","getToday","replaceChildren","currDate","j","activeProject","editProject","showTaskDialog","showModal","closeTaskDialog","close","clearTaskForm","reset","showProjectDialog","closeProjectDialog","clearProjectForm","bindSelectProject","handler","addEventListener","event","target","closest","bindOpenTaskDialog","bindEditTaskDialog","bindCloseTaskDialog","bindTaskSubmit","bindDeleteTask","todayHandler","bindToggleTaskDetails","bindToggleTaskCompleteMarker","bindOpenProjectDialog","bindCloseProjectDialog","bindProjectSubmit","bindEditProjectDialog","bindDeleteProject","handleSelectProject","bind","handleDeleteTask","handleDeleteTodayTask","handleOpenTaskDialog","handleCloseTaskDialog","handleTaskSubmit","handleEditTaskDialog","handleToggleTaskDetails","handleToggleCompleteMarker","handleToggleCompleteMarkerToday","handleOpenProjectDialog","handleCloseProjectDialog","handleProjectSubmit","handleEditProjectDialog","handleDeleteProject","run","currentlyLoadingProject","deletedProject","newTask"],"sourceRoot":""}